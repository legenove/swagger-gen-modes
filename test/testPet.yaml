swagger: "2.0"
info:
  description: |
    This is a sample Petstore server.  You can test
  title: Swagger Petstore
  version: 1.0.0
schemes:
  - http
  - grpc
  - tcp
tags:
  - description: Everything about your Pets
    name: pet
  - description: Access to Petstore orders
    name: store
  - description: Operations about user
    name: user
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
host: virtserver.swaggerhub.com
basePath: /legenove6/test2.0/1.0.0
paths:
  /pet:
    post:
      consumes:
        - application/json
        - application/xml
      operationId: addPet
      parameters:
        - description: Pet object that needs to be added to the store
          fieldNumber: 1
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Pet'
      produces:
        - application/json
        - application/xml
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Add a new pet to the store
      tags:
        - pet
    put:
      consumes:
        - application/json
        - application/xml
      operationId: updatePet
      parameters:
        - description: Pet object that needs to be added to the store
          fieldNumber: 1
          in: body
          name: pet
          required: true
          schema:
            $ref: '#/definitions/Pet'
      produces:
        - application/json
        - application/xml
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Update an existing pet
      tags:
        - pet
  /pet/{petId}:
    delete:
      operationId: deletePet
      parameters:
        - description: Pet id to delete
          fieldNumber: 1
          format: int64
          in: path
          name: petId
          required: true
          type: integer
      produces:
        - application/json
        - application/xml
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Deletes a pet
      tags:
        - pet
    get:
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - description: ID of pet to return
          fieldNumber: 1
          format: int64
          in: path
          name: petId
          required: true
          type: integer
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
      summary: Find pet by ID
      tags:
        - pet
    post:
      consumes:
        - application/x-www-form-urlencoded
      operationId: updatePetWithForm
      parameters:
        - description: ID of pet that needs to be updated
          fieldNumber: 1
          format: int64
          in: path
          name: petId
          required: true
          type: integer
        - description: Updated name of the pet
          fieldNumber: 2
          in: formData
          name: name
          type: string
        - description: Updated status of the pet
          fieldNumber: 3
          in: formData
          name: status
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Updates a pet in the store with form data
      tags:
        - pet
  /pet/{petId}/uploadImage:
    post:
      consumes:
        - multipart/form-data
      operationId: uploadFile
      parameters:
        - description: ID of pet to update
          fieldNumber: 1
          format: int64
          in: path
          name: petId
          required: true
          type: integer
        - description: Additional data to pass to server
          fieldNumber: 2
          in: formData
          name: additionalMetadata
          type: string
        - description: file to upload
          fieldNumber: 3
          in: formData
          name: file
          type: file
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: uploads an image
      tags:
        - pet
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - collectionFormat: multi
          description: Status values that need to be considered for filter
          fieldNumber: 1
          in: query
          items:
            default: available
            enum:
              - available
              - pending
              - sold
            type: string
          name: status
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/Pet'
            type: array
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Finds Pets by status
      tags:
        - pet
  /pet/findByTags:
    get:
      deprecated: true
      description: Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - collectionFormat: multi
          description: Tags to filter by
          fieldNumber: 1
          in: query
          items:
            type: string
          name: tags
          required: true
          type: array
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/Pet'
            type: array
        "400":
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      summary: Finds Pets by tags
      tags:
        - pet
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      responses:
        "200":
          description: successful operation
          schema:
            additionalProperties:
              format: int32
              type: integer
            type: object
      security:
        - api_key: []
      summary: Returns pet inventories by status
      tags:
        - store
  /store/order:
    post:
      operationId: placeOrder
      parameters:
        - description: order placed for purchasing the pet
          fieldNumber: 1
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Order'
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Invalid Order
      summary: Place an order for a pet
      tags:
        - store
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - description: ID of the order that needs to be deleted
          fieldNumber: 1
          format: int64
          in: path
          minimum: 1
          name: orderId
          required: true
          type: integer
      produces:
        - application/json
        - application/xml
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete purchase order by ID
      tags:
        - store
    get:
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getOrderById
      parameters:
        - description: ID of pet that needs to be fetched
          fieldNumber: 1
          format: int64
          in: path
          maximum: 10
          minimum: 1
          name: orderId
          required: true
          type: integer
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Find purchase order by ID
      tags:
        - store
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      parameters:
        - description: Created user object
          fieldNumber: 1
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: successful operation
      summary: Create user
      tags:
        - user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - description: The name that needs to be deleted
          fieldNumber: 1
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          schema:
            properties:
              id:
                fieldNumber: 1
                format: int64
                type: integer
              petId:
                fieldNumber: 2
                properties:
                  id:
                    fieldNumber: 1
                    format: int64
                    type: integer
                type: object
            type: object
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
        - user
    get:
      operationId: getUserByName
      parameters:
        - description: The name that needs to be fetched. Use user1 for testing.
          fieldNumber: 1
          in: path
          name: username
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
        - user
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - description: name that need to be updated
          fieldNumber: 1
          in: path
          name: username
          required: true
          type: string
        - description: Updated user object
          fieldNumber: 2
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
        - application/xml
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      summary: Updated user
      tags:
        - user
  /user/createWithArray:
    post:
      operationId: createUsersWithArrayInput
      parameters:
        - description: List of user object
          fieldNumber: 1
          in: body
          name: body
          required: true
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
        - user
  /user/createWithList:
    post:
      operationId: createUsersWithListInput
      parameters:
        - description: List of user object
          fieldNumber: 1
          in: body
          name: body
          required: true
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
        - user
  /user/login:
    get:
      operationId: loginUser
      parameters:
        - description: The user name for login
          fieldNumber: 1
          in: query
          name: username
          required: true
          type: string
        - description: The password for login in clear text
          fieldNumber: 2
          in: query
          name: password
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        "200":
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              format: date-time
              type: string
            X-Rate-Limit:
              description: calls per hour allowed by the user
              format: int32
              type: integer
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
        - user
  /user/logout:
    get:
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: successful operation
      summary: Logs out current logged in user session
      tags:
        - user
definitions:
  ApiResponse:
    properties:
      code:
        fieldNumber: 1
        format: int32
        type: integer
      message:
        fieldNumber: 3
        type: string
      type:
        fieldNumber: 2
        type: string
    type: object
  Category:
    properties:
      id:
        fieldNumber: 1
        format: int64
        type: integer
      name:
        fieldNumber: 2
        type: string
      testObject:
        fieldNumber: 3
        properties:
          id:
            fieldNumber: 1
            format: int64
            type: integer
          petId:
            fieldNumber: 2
            format: int64
            type: integer
    type: object
    xml:
      name: Category
  Order:
    properties:
      complete:
        default: false
        fieldNumber: 5
        type: boolean
      id:
        fieldNumber: 6
        format: int64
        type: integer
      petId:
        fieldNumber: 1
        format: int64
        type: integer
      quantity:
        fieldNumber: 2
        format: int32
        type: integer
      shipDate:
        fieldNumber: 3
        format: date-time
        type: string
      status:
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
        fieldNumber: 4
        type: string
    type: object
    xml:
      name: Order
  Pet:
    properties:
      category:
        $ref: '#/definitions/Category'
        fieldNumber: 4
      id:
        fieldNumber: 3
        format: int64
        type: integer
      name:
        example: doggie
        fieldNumber: 5
        type: string
      photoUrls:
        fieldNumber: 6
        items:
          type: string
        type: array
        xml:
          name: photoUrl
          wrapped: true
      status:
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
        fieldNumber: 2
        type: string
      tags:
        fieldNumber: 1
        items:
          $ref: '#/definitions/Tag'
        type: array
        xml:
          name: tag
          wrapped: true
    required:
      - name
      - photoUrls
    type: object
    xml:
      name: Pet
  Tag:
    properties:
      id:
        fieldNumber: 1
        format: int64
        type: integer
      name:
        fieldNumber: 2
        type: string
    type: object
    xml:
      name: Tag
  User:
    properties:
      email:
        fieldNumber: 3
        type: string
      firstName:
        fieldNumber: 1
        type: string
      id:
        fieldNumber: 7
        format: int64
        type: integer
      lastName:
        fieldNumber: 2
        type: string
      password:
        fieldNumber: 10
        type: string
      phone:
        fieldNumber: 5
        type: string
      userStatus:
        description: User Status
        fieldNumber: 6
        format: int32
        type: integer
      username:
        fieldNumber: 8
        type: string
      phone1:
        fieldNumber: 9
        type: string
    type: object
    xml:
      name: User
securityDefinitions:
  api_key:
    in: header
    name: api_key
    type: apiKey
  petstore_auth:
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      read:pets: read your pets
      write:pets: modify pets in your account
    type: oauth2
