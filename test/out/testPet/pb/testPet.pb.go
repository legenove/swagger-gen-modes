// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testPet.proto

package testPet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetPetFindByStatusRequest struct {
	Status               []string `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPetFindByStatusRequest) Reset()         { *m = GetPetFindByStatusRequest{} }
func (m *GetPetFindByStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetPetFindByStatusRequest) ProtoMessage()    {}
func (*GetPetFindByStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{0}
}
func (m *GetPetFindByStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPetFindByStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPetFindByStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPetFindByStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetFindByStatusRequest.Merge(m, src)
}
func (m *GetPetFindByStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPetFindByStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetFindByStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetFindByStatusRequest proto.InternalMessageInfo

func (m *GetPetFindByStatusRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetPetFindByTagsRequest struct {
	Tags                 []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPetFindByTagsRequest) Reset()         { *m = GetPetFindByTagsRequest{} }
func (m *GetPetFindByTagsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPetFindByTagsRequest) ProtoMessage()    {}
func (*GetPetFindByTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{1}
}
func (m *GetPetFindByTagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPetFindByTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPetFindByTagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPetFindByTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetFindByTagsRequest.Merge(m, src)
}
func (m *GetPetFindByTagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPetFindByTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetFindByTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetFindByTagsRequest proto.InternalMessageInfo

func (m *GetPetFindByTagsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type GetPetPetIdRequest struct {
	PetId                int64    `protobuf:"zigzag64,1,opt,name=petId,proto3" json:"petId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPetPetIdRequest) Reset()         { *m = GetPetPetIdRequest{} }
func (m *GetPetPetIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetPetPetIdRequest) ProtoMessage()    {}
func (*GetPetPetIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{2}
}
func (m *GetPetPetIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPetPetIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPetPetIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPetPetIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetPetIdRequest.Merge(m, src)
}
func (m *GetPetPetIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPetPetIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetPetIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetPetIdRequest proto.InternalMessageInfo

func (m *GetPetPetIdRequest) GetPetId() int64 {
	if m != nil {
		return m.PetId
	}
	return 0
}

type PostPetPetIdRequest struct {
	PetId                int64    `protobuf:"zigzag64,1,opt,name=petId,proto3" json:"petId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostPetPetIdRequest) Reset()         { *m = PostPetPetIdRequest{} }
func (m *PostPetPetIdRequest) String() string { return proto.CompactTextString(m) }
func (*PostPetPetIdRequest) ProtoMessage()    {}
func (*PostPetPetIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{3}
}
func (m *PostPetPetIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPetPetIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPetPetIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPetPetIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPetPetIdRequest.Merge(m, src)
}
func (m *PostPetPetIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostPetPetIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPetPetIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostPetPetIdRequest proto.InternalMessageInfo

func (m *PostPetPetIdRequest) GetPetId() int64 {
	if m != nil {
		return m.PetId
	}
	return 0
}

func (m *PostPetPetIdRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PostPetPetIdRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type DeletePetPetIdRequest struct {
	PetId                int64    `protobuf:"zigzag64,1,opt,name=petId,proto3" json:"petId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePetPetIdRequest) Reset()         { *m = DeletePetPetIdRequest{} }
func (m *DeletePetPetIdRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePetPetIdRequest) ProtoMessage()    {}
func (*DeletePetPetIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{4}
}
func (m *DeletePetPetIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePetPetIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePetPetIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePetPetIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePetPetIdRequest.Merge(m, src)
}
func (m *DeletePetPetIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePetPetIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePetPetIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePetPetIdRequest proto.InternalMessageInfo

func (m *DeletePetPetIdRequest) GetPetId() int64 {
	if m != nil {
		return m.PetId
	}
	return 0
}

type PostPetPetIdUploadImageRequest struct {
	PetId                int64    `protobuf:"zigzag64,1,opt,name=petId,proto3" json:"petId,omitempty"`
	AdditionalMetadata   string   `protobuf:"bytes,2,opt,name=additionalMetadata,proto3" json:"additionalMetadata,omitempty"`
	File                 []byte   `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostPetPetIdUploadImageRequest) Reset()         { *m = PostPetPetIdUploadImageRequest{} }
func (m *PostPetPetIdUploadImageRequest) String() string { return proto.CompactTextString(m) }
func (*PostPetPetIdUploadImageRequest) ProtoMessage()    {}
func (*PostPetPetIdUploadImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{5}
}
func (m *PostPetPetIdUploadImageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPetPetIdUploadImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPetPetIdUploadImageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPetPetIdUploadImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPetPetIdUploadImageRequest.Merge(m, src)
}
func (m *PostPetPetIdUploadImageRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostPetPetIdUploadImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPetPetIdUploadImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostPetPetIdUploadImageRequest proto.InternalMessageInfo

func (m *PostPetPetIdUploadImageRequest) GetPetId() int64 {
	if m != nil {
		return m.PetId
	}
	return 0
}

func (m *PostPetPetIdUploadImageRequest) GetAdditionalMetadata() string {
	if m != nil {
		return m.AdditionalMetadata
	}
	return ""
}

func (m *PostPetPetIdUploadImageRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

type PostPetRequest struct {
	Body                 *DefinitionsPet `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PostPetRequest) Reset()         { *m = PostPetRequest{} }
func (m *PostPetRequest) String() string { return proto.CompactTextString(m) }
func (*PostPetRequest) ProtoMessage()    {}
func (*PostPetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{6}
}
func (m *PostPetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPetRequest.Merge(m, src)
}
func (m *PostPetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostPetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostPetRequest proto.InternalMessageInfo

func (m *PostPetRequest) GetBody() *DefinitionsPet {
	if m != nil {
		return m.Body
	}
	return nil
}

type PutPetRequest struct {
	Pet                  *DefinitionsPet `protobuf:"bytes,1,opt,name=pet,proto3" json:"pet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PutPetRequest) Reset()         { *m = PutPetRequest{} }
func (m *PutPetRequest) String() string { return proto.CompactTextString(m) }
func (*PutPetRequest) ProtoMessage()    {}
func (*PutPetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{7}
}
func (m *PutPetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutPetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutPetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutPetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutPetRequest.Merge(m, src)
}
func (m *PutPetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutPetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutPetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutPetRequest proto.InternalMessageInfo

func (m *PutPetRequest) GetPet() *DefinitionsPet {
	if m != nil {
		return m.Pet
	}
	return nil
}

type GetStoreOrderOrderIdRequest struct {
	OrderId              uint64   `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStoreOrderOrderIdRequest) Reset()         { *m = GetStoreOrderOrderIdRequest{} }
func (m *GetStoreOrderOrderIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetStoreOrderOrderIdRequest) ProtoMessage()    {}
func (*GetStoreOrderOrderIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{8}
}
func (m *GetStoreOrderOrderIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStoreOrderOrderIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStoreOrderOrderIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStoreOrderOrderIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStoreOrderOrderIdRequest.Merge(m, src)
}
func (m *GetStoreOrderOrderIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStoreOrderOrderIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStoreOrderOrderIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStoreOrderOrderIdRequest proto.InternalMessageInfo

func (m *GetStoreOrderOrderIdRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type DeleteStoreOrderOrderIdRequest struct {
	OrderId              uint64   `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteStoreOrderOrderIdRequest) Reset()         { *m = DeleteStoreOrderOrderIdRequest{} }
func (m *DeleteStoreOrderOrderIdRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteStoreOrderOrderIdRequest) ProtoMessage()    {}
func (*DeleteStoreOrderOrderIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{9}
}
func (m *DeleteStoreOrderOrderIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStoreOrderOrderIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStoreOrderOrderIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStoreOrderOrderIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStoreOrderOrderIdRequest.Merge(m, src)
}
func (m *DeleteStoreOrderOrderIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStoreOrderOrderIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStoreOrderOrderIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStoreOrderOrderIdRequest proto.InternalMessageInfo

func (m *DeleteStoreOrderOrderIdRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type PostStoreOrderRequest struct {
	Body                 *DefinitionsOrder `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PostStoreOrderRequest) Reset()         { *m = PostStoreOrderRequest{} }
func (m *PostStoreOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PostStoreOrderRequest) ProtoMessage()    {}
func (*PostStoreOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{10}
}
func (m *PostStoreOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostStoreOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostStoreOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostStoreOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostStoreOrderRequest.Merge(m, src)
}
func (m *PostStoreOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostStoreOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostStoreOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostStoreOrderRequest proto.InternalMessageInfo

func (m *PostStoreOrderRequest) GetBody() *DefinitionsOrder {
	if m != nil {
		return m.Body
	}
	return nil
}

type PostUserCreateWithArrayRequest struct {
	Body                 []*DefinitionsUser `protobuf:"bytes,1,rep,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PostUserCreateWithArrayRequest) Reset()         { *m = PostUserCreateWithArrayRequest{} }
func (m *PostUserCreateWithArrayRequest) String() string { return proto.CompactTextString(m) }
func (*PostUserCreateWithArrayRequest) ProtoMessage()    {}
func (*PostUserCreateWithArrayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{11}
}
func (m *PostUserCreateWithArrayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostUserCreateWithArrayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostUserCreateWithArrayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostUserCreateWithArrayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostUserCreateWithArrayRequest.Merge(m, src)
}
func (m *PostUserCreateWithArrayRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostUserCreateWithArrayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostUserCreateWithArrayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostUserCreateWithArrayRequest proto.InternalMessageInfo

func (m *PostUserCreateWithArrayRequest) GetBody() []*DefinitionsUser {
	if m != nil {
		return m.Body
	}
	return nil
}

type PostUserCreateWithListRequest struct {
	Body                 []*DefinitionsUser `protobuf:"bytes,1,rep,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PostUserCreateWithListRequest) Reset()         { *m = PostUserCreateWithListRequest{} }
func (m *PostUserCreateWithListRequest) String() string { return proto.CompactTextString(m) }
func (*PostUserCreateWithListRequest) ProtoMessage()    {}
func (*PostUserCreateWithListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{12}
}
func (m *PostUserCreateWithListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostUserCreateWithListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostUserCreateWithListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostUserCreateWithListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostUserCreateWithListRequest.Merge(m, src)
}
func (m *PostUserCreateWithListRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostUserCreateWithListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostUserCreateWithListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostUserCreateWithListRequest proto.InternalMessageInfo

func (m *PostUserCreateWithListRequest) GetBody() []*DefinitionsUser {
	if m != nil {
		return m.Body
	}
	return nil
}

type GetUserLoginRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserLoginRequest) Reset()         { *m = GetUserLoginRequest{} }
func (m *GetUserLoginRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserLoginRequest) ProtoMessage()    {}
func (*GetUserLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{13}
}
func (m *GetUserLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserLoginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserLoginRequest.Merge(m, src)
}
func (m *GetUserLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserLoginRequest proto.InternalMessageInfo

func (m *GetUserLoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserLoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type PostUserRequest struct {
	Body                 *DefinitionsUser `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PostUserRequest) Reset()         { *m = PostUserRequest{} }
func (m *PostUserRequest) String() string { return proto.CompactTextString(m) }
func (*PostUserRequest) ProtoMessage()    {}
func (*PostUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{14}
}
func (m *PostUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostUserRequest.Merge(m, src)
}
func (m *PostUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *PostUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostUserRequest proto.InternalMessageInfo

func (m *PostUserRequest) GetBody() *DefinitionsUser {
	if m != nil {
		return m.Body
	}
	return nil
}

type GetUserUsernameRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserUsernameRequest) Reset()         { *m = GetUserUsernameRequest{} }
func (m *GetUserUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserUsernameRequest) ProtoMessage()    {}
func (*GetUserUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{15}
}
func (m *GetUserUsernameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserUsernameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserUsernameRequest.Merge(m, src)
}
func (m *GetUserUsernameRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserUsernameRequest proto.InternalMessageInfo

func (m *GetUserUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type PutUserUsernameRequest struct {
	Username             string           `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Body                 *DefinitionsUser `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PutUserUsernameRequest) Reset()         { *m = PutUserUsernameRequest{} }
func (m *PutUserUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*PutUserUsernameRequest) ProtoMessage()    {}
func (*PutUserUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{16}
}
func (m *PutUserUsernameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutUserUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutUserUsernameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutUserUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutUserUsernameRequest.Merge(m, src)
}
func (m *PutUserUsernameRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutUserUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutUserUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutUserUsernameRequest proto.InternalMessageInfo

func (m *PutUserUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *PutUserUsernameRequest) GetBody() *DefinitionsUser {
	if m != nil {
		return m.Body
	}
	return nil
}

type DeleteUserUsernameRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteUserUsernameRequest) Reset()         { *m = DeleteUserUsernameRequest{} }
func (m *DeleteUserUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameRequest) ProtoMessage()    {}
func (*DeleteUserUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{17}
}
func (m *DeleteUserUsernameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserUsernameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserUsernameRequest.Merge(m, src)
}
func (m *DeleteUserUsernameRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserUsernameRequest proto.InternalMessageInfo

func (m *DeleteUserUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetPetFindByStatusReply struct {
	HttpCode             uint32            `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32            `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string            `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 []*DefinitionsPet `protobuf:"bytes,15,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPetFindByStatusReply) Reset()         { *m = GetPetFindByStatusReply{} }
func (m *GetPetFindByStatusReply) String() string { return proto.CompactTextString(m) }
func (*GetPetFindByStatusReply) ProtoMessage()    {}
func (*GetPetFindByStatusReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{18}
}
func (m *GetPetFindByStatusReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPetFindByStatusReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPetFindByStatusReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPetFindByStatusReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetFindByStatusReply.Merge(m, src)
}
func (m *GetPetFindByStatusReply) XXX_Size() int {
	return m.Size()
}
func (m *GetPetFindByStatusReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetFindByStatusReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetFindByStatusReply proto.InternalMessageInfo

func (m *GetPetFindByStatusReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetPetFindByStatusReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetPetFindByStatusReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetPetFindByStatusReply) GetData() []*DefinitionsPet {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetPetFindByTagsReply struct {
	HttpCode             uint32            `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32            `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string            `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 []*DefinitionsPet `protobuf:"bytes,15,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPetFindByTagsReply) Reset()         { *m = GetPetFindByTagsReply{} }
func (m *GetPetFindByTagsReply) String() string { return proto.CompactTextString(m) }
func (*GetPetFindByTagsReply) ProtoMessage()    {}
func (*GetPetFindByTagsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{19}
}
func (m *GetPetFindByTagsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPetFindByTagsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPetFindByTagsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPetFindByTagsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetFindByTagsReply.Merge(m, src)
}
func (m *GetPetFindByTagsReply) XXX_Size() int {
	return m.Size()
}
func (m *GetPetFindByTagsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetFindByTagsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetFindByTagsReply proto.InternalMessageInfo

func (m *GetPetFindByTagsReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetPetFindByTagsReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetPetFindByTagsReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetPetFindByTagsReply) GetData() []*DefinitionsPet {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetPetPetIdReply struct {
	HttpCode             uint32          `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32          `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string          `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 *DefinitionsPet `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetPetPetIdReply) Reset()         { *m = GetPetPetIdReply{} }
func (m *GetPetPetIdReply) String() string { return proto.CompactTextString(m) }
func (*GetPetPetIdReply) ProtoMessage()    {}
func (*GetPetPetIdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{20}
}
func (m *GetPetPetIdReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPetPetIdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPetPetIdReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPetPetIdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetPetIdReply.Merge(m, src)
}
func (m *GetPetPetIdReply) XXX_Size() int {
	return m.Size()
}
func (m *GetPetPetIdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetPetIdReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetPetIdReply proto.InternalMessageInfo

func (m *GetPetPetIdReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetPetPetIdReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetPetPetIdReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetPetPetIdReply) GetData() *DefinitionsPet {
	if m != nil {
		return m.Data
	}
	return nil
}

type PostPetPetIdUploadImageReply struct {
	HttpCode             uint32                  `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32                  `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string                  `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 *DefinitionsApiResponse `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PostPetPetIdUploadImageReply) Reset()         { *m = PostPetPetIdUploadImageReply{} }
func (m *PostPetPetIdUploadImageReply) String() string { return proto.CompactTextString(m) }
func (*PostPetPetIdUploadImageReply) ProtoMessage()    {}
func (*PostPetPetIdUploadImageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{21}
}
func (m *PostPetPetIdUploadImageReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostPetPetIdUploadImageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostPetPetIdUploadImageReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostPetPetIdUploadImageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostPetPetIdUploadImageReply.Merge(m, src)
}
func (m *PostPetPetIdUploadImageReply) XXX_Size() int {
	return m.Size()
}
func (m *PostPetPetIdUploadImageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PostPetPetIdUploadImageReply.DiscardUnknown(m)
}

var xxx_messageInfo_PostPetPetIdUploadImageReply proto.InternalMessageInfo

func (m *PostPetPetIdUploadImageReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *PostPetPetIdUploadImageReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *PostPetPetIdUploadImageReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *PostPetPetIdUploadImageReply) GetData() *DefinitionsApiResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetStoreInventoryReply struct {
	HttpCode             uint32             `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32             `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string             `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 map[int32]*any.Any `protobuf:"bytes,15,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetStoreInventoryReply) Reset()         { *m = GetStoreInventoryReply{} }
func (m *GetStoreInventoryReply) String() string { return proto.CompactTextString(m) }
func (*GetStoreInventoryReply) ProtoMessage()    {}
func (*GetStoreInventoryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{22}
}
func (m *GetStoreInventoryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStoreInventoryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStoreInventoryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStoreInventoryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStoreInventoryReply.Merge(m, src)
}
func (m *GetStoreInventoryReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStoreInventoryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStoreInventoryReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStoreInventoryReply proto.InternalMessageInfo

func (m *GetStoreInventoryReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetStoreInventoryReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetStoreInventoryReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetStoreInventoryReply) GetData() map[int32]*any.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type PostStoreOrderReply struct {
	HttpCode             uint32            `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32            `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string            `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 *DefinitionsOrder `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PostStoreOrderReply) Reset()         { *m = PostStoreOrderReply{} }
func (m *PostStoreOrderReply) String() string { return proto.CompactTextString(m) }
func (*PostStoreOrderReply) ProtoMessage()    {}
func (*PostStoreOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{23}
}
func (m *PostStoreOrderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostStoreOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostStoreOrderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostStoreOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostStoreOrderReply.Merge(m, src)
}
func (m *PostStoreOrderReply) XXX_Size() int {
	return m.Size()
}
func (m *PostStoreOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PostStoreOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_PostStoreOrderReply proto.InternalMessageInfo

func (m *PostStoreOrderReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *PostStoreOrderReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *PostStoreOrderReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *PostStoreOrderReply) GetData() *DefinitionsOrder {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetStoreOrderOrderIdReply struct {
	HttpCode             uint32            `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32            `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string            `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 *DefinitionsOrder `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetStoreOrderOrderIdReply) Reset()         { *m = GetStoreOrderOrderIdReply{} }
func (m *GetStoreOrderOrderIdReply) String() string { return proto.CompactTextString(m) }
func (*GetStoreOrderOrderIdReply) ProtoMessage()    {}
func (*GetStoreOrderOrderIdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{24}
}
func (m *GetStoreOrderOrderIdReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStoreOrderOrderIdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStoreOrderOrderIdReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStoreOrderOrderIdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStoreOrderOrderIdReply.Merge(m, src)
}
func (m *GetStoreOrderOrderIdReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStoreOrderOrderIdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStoreOrderOrderIdReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStoreOrderOrderIdReply proto.InternalMessageInfo

func (m *GetStoreOrderOrderIdReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetStoreOrderOrderIdReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetStoreOrderOrderIdReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetStoreOrderOrderIdReply) GetData() *DefinitionsOrder {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetUserLoginReply struct {
	HttpCode             uint32   `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32   `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 string   `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUserLoginReply) Reset()         { *m = GetUserLoginReply{} }
func (m *GetUserLoginReply) String() string { return proto.CompactTextString(m) }
func (*GetUserLoginReply) ProtoMessage()    {}
func (*GetUserLoginReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{25}
}
func (m *GetUserLoginReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserLoginReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserLoginReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserLoginReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserLoginReply.Merge(m, src)
}
func (m *GetUserLoginReply) XXX_Size() int {
	return m.Size()
}
func (m *GetUserLoginReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserLoginReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserLoginReply proto.InternalMessageInfo

func (m *GetUserLoginReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetUserLoginReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetUserLoginReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetUserLoginReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type GetUserUsernameReply struct {
	HttpCode             uint32           `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32           `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string           `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 *DefinitionsUser `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetUserUsernameReply) Reset()         { *m = GetUserUsernameReply{} }
func (m *GetUserUsernameReply) String() string { return proto.CompactTextString(m) }
func (*GetUserUsernameReply) ProtoMessage()    {}
func (*GetUserUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{26}
}
func (m *GetUserUsernameReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserUsernameReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserUsernameReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserUsernameReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserUsernameReply.Merge(m, src)
}
func (m *GetUserUsernameReply) XXX_Size() int {
	return m.Size()
}
func (m *GetUserUsernameReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserUsernameReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserUsernameReply proto.InternalMessageInfo

func (m *GetUserUsernameReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *GetUserUsernameReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetUserUsernameReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *GetUserUsernameReply) GetData() *DefinitionsUser {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteUserUsernameReply struct {
	HttpCode             uint32                       `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32                       `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string                       `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	Data                 *DeleteUserUsernameReplyData `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DeleteUserUsernameReply) Reset()         { *m = DeleteUserUsernameReply{} }
func (m *DeleteUserUsernameReply) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameReply) ProtoMessage()    {}
func (*DeleteUserUsernameReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{27}
}
func (m *DeleteUserUsernameReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserUsernameReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserUsernameReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserUsernameReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserUsernameReply.Merge(m, src)
}
func (m *DeleteUserUsernameReply) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserUsernameReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserUsernameReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserUsernameReply proto.InternalMessageInfo

func (m *DeleteUserUsernameReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *DeleteUserUsernameReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteUserUsernameReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func (m *DeleteUserUsernameReply) GetData() *DeleteUserUsernameReplyData {
	if m != nil {
		return m.Data
	}
	return nil
}

type DeleteUserUsernameReplyData struct {
	Id                   int64                             `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	PetId                *DeleteUserUsernameReplyDataPetId `protobuf:"bytes,2,opt,name=petId,proto3" json:"petId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DeleteUserUsernameReplyData) Reset()         { *m = DeleteUserUsernameReplyData{} }
func (m *DeleteUserUsernameReplyData) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameReplyData) ProtoMessage()    {}
func (*DeleteUserUsernameReplyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{28}
}
func (m *DeleteUserUsernameReplyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserUsernameReplyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserUsernameReplyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserUsernameReplyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserUsernameReplyData.Merge(m, src)
}
func (m *DeleteUserUsernameReplyData) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserUsernameReplyData) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserUsernameReplyData.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserUsernameReplyData proto.InternalMessageInfo

func (m *DeleteUserUsernameReplyData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteUserUsernameReplyData) GetPetId() *DeleteUserUsernameReplyDataPetId {
	if m != nil {
		return m.PetId
	}
	return nil
}

type DeleteUserUsernameReplyDataPetId struct {
	Id                   int64    `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteUserUsernameReplyDataPetId) Reset()         { *m = DeleteUserUsernameReplyDataPetId{} }
func (m *DeleteUserUsernameReplyDataPetId) String() string { return proto.CompactTextString(m) }
func (*DeleteUserUsernameReplyDataPetId) ProtoMessage()    {}
func (*DeleteUserUsernameReplyDataPetId) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{29}
}
func (m *DeleteUserUsernameReplyDataPetId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserUsernameReplyDataPetId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserUsernameReplyDataPetId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserUsernameReplyDataPetId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserUsernameReplyDataPetId.Merge(m, src)
}
func (m *DeleteUserUsernameReplyDataPetId) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserUsernameReplyDataPetId) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserUsernameReplyDataPetId.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserUsernameReplyDataPetId proto.InternalMessageInfo

func (m *DeleteUserUsernameReplyDataPetId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DefinitionsApiResponse struct {
	Code                 int32    `protobuf:"zigzag32,1,opt,name=code,proto3" json:"code,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefinitionsApiResponse) Reset()         { *m = DefinitionsApiResponse{} }
func (m *DefinitionsApiResponse) String() string { return proto.CompactTextString(m) }
func (*DefinitionsApiResponse) ProtoMessage()    {}
func (*DefinitionsApiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{30}
}
func (m *DefinitionsApiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionsApiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionsApiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionsApiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionsApiResponse.Merge(m, src)
}
func (m *DefinitionsApiResponse) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionsApiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionsApiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionsApiResponse proto.InternalMessageInfo

func (m *DefinitionsApiResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DefinitionsApiResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DefinitionsApiResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DefinitionsCategory struct {
	Id                   int64                          `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TestObject           *DefinitionsCategoryTestObject `protobuf:"bytes,3,opt,name=testObject,proto3" json:"testObject,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *DefinitionsCategory) Reset()         { *m = DefinitionsCategory{} }
func (m *DefinitionsCategory) String() string { return proto.CompactTextString(m) }
func (*DefinitionsCategory) ProtoMessage()    {}
func (*DefinitionsCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{31}
}
func (m *DefinitionsCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionsCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionsCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionsCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionsCategory.Merge(m, src)
}
func (m *DefinitionsCategory) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionsCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionsCategory.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionsCategory proto.InternalMessageInfo

func (m *DefinitionsCategory) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DefinitionsCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DefinitionsCategory) GetTestObject() *DefinitionsCategoryTestObject {
	if m != nil {
		return m.TestObject
	}
	return nil
}

type DefinitionsCategoryTestObject struct {
	Id                   int64    `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	PetId                int64    `protobuf:"zigzag64,2,opt,name=petId,proto3" json:"petId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefinitionsCategoryTestObject) Reset()         { *m = DefinitionsCategoryTestObject{} }
func (m *DefinitionsCategoryTestObject) String() string { return proto.CompactTextString(m) }
func (*DefinitionsCategoryTestObject) ProtoMessage()    {}
func (*DefinitionsCategoryTestObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{32}
}
func (m *DefinitionsCategoryTestObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionsCategoryTestObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionsCategoryTestObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionsCategoryTestObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionsCategoryTestObject.Merge(m, src)
}
func (m *DefinitionsCategoryTestObject) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionsCategoryTestObject) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionsCategoryTestObject.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionsCategoryTestObject proto.InternalMessageInfo

func (m *DefinitionsCategoryTestObject) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DefinitionsCategoryTestObject) GetPetId() int64 {
	if m != nil {
		return m.PetId
	}
	return 0
}

type DefinitionsOrder struct {
	PetId                int64    `protobuf:"zigzag64,1,opt,name=petId,proto3" json:"petId,omitempty"`
	Quantity             int32    `protobuf:"zigzag32,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ShipDate             string   `protobuf:"bytes,3,opt,name=shipDate,proto3" json:"shipDate,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Complete             bool     `protobuf:"varint,5,opt,name=complete,proto3" json:"complete,omitempty"`
	Id                   int64    `protobuf:"zigzag64,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefinitionsOrder) Reset()         { *m = DefinitionsOrder{} }
func (m *DefinitionsOrder) String() string { return proto.CompactTextString(m) }
func (*DefinitionsOrder) ProtoMessage()    {}
func (*DefinitionsOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{33}
}
func (m *DefinitionsOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionsOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionsOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionsOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionsOrder.Merge(m, src)
}
func (m *DefinitionsOrder) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionsOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionsOrder.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionsOrder proto.InternalMessageInfo

func (m *DefinitionsOrder) GetPetId() int64 {
	if m != nil {
		return m.PetId
	}
	return 0
}

func (m *DefinitionsOrder) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *DefinitionsOrder) GetShipDate() string {
	if m != nil {
		return m.ShipDate
	}
	return ""
}

func (m *DefinitionsOrder) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DefinitionsOrder) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *DefinitionsOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DefinitionsPet struct {
	Tags                 []*DefinitionsTag    `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Status               string               `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Id                   int64                `protobuf:"zigzag64,3,opt,name=id,proto3" json:"id,omitempty"`
	Category             *DefinitionsCategory `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Name                 string               `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PhotoUrls            []string             `protobuf:"bytes,6,rep,name=photoUrls,proto3" json:"photoUrls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DefinitionsPet) Reset()         { *m = DefinitionsPet{} }
func (m *DefinitionsPet) String() string { return proto.CompactTextString(m) }
func (*DefinitionsPet) ProtoMessage()    {}
func (*DefinitionsPet) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{34}
}
func (m *DefinitionsPet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionsPet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionsPet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionsPet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionsPet.Merge(m, src)
}
func (m *DefinitionsPet) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionsPet) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionsPet.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionsPet proto.InternalMessageInfo

func (m *DefinitionsPet) GetTags() []*DefinitionsTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *DefinitionsPet) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DefinitionsPet) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DefinitionsPet) GetCategory() *DefinitionsCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *DefinitionsPet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DefinitionsPet) GetPhotoUrls() []string {
	if m != nil {
		return m.PhotoUrls
	}
	return nil
}

type DefinitionsTag struct {
	Id                   int64    `protobuf:"zigzag64,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefinitionsTag) Reset()         { *m = DefinitionsTag{} }
func (m *DefinitionsTag) String() string { return proto.CompactTextString(m) }
func (*DefinitionsTag) ProtoMessage()    {}
func (*DefinitionsTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{35}
}
func (m *DefinitionsTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionsTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionsTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionsTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionsTag.Merge(m, src)
}
func (m *DefinitionsTag) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionsTag) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionsTag.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionsTag proto.InternalMessageInfo

func (m *DefinitionsTag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DefinitionsTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DefinitionsUser struct {
	FirstName            string   `protobuf:"bytes,1,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName             string   `protobuf:"bytes,2,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	UserStatus           int32    `protobuf:"zigzag32,6,opt,name=userStatus,proto3" json:"userStatus,omitempty"`
	Id                   int64    `protobuf:"zigzag64,7,opt,name=id,proto3" json:"id,omitempty"`
	Password             string   `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	Phone1               string   `protobuf:"bytes,9,opt,name=phone1,proto3" json:"phone1,omitempty"`
	Username             string   `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefinitionsUser) Reset()         { *m = DefinitionsUser{} }
func (m *DefinitionsUser) String() string { return proto.CompactTextString(m) }
func (*DefinitionsUser) ProtoMessage()    {}
func (*DefinitionsUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{36}
}
func (m *DefinitionsUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefinitionsUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefinitionsUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefinitionsUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefinitionsUser.Merge(m, src)
}
func (m *DefinitionsUser) XXX_Size() int {
	return m.Size()
}
func (m *DefinitionsUser) XXX_DiscardUnknown() {
	xxx_messageInfo_DefinitionsUser.DiscardUnknown(m)
}

var xxx_messageInfo_DefinitionsUser proto.InternalMessageInfo

func (m *DefinitionsUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DefinitionsUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *DefinitionsUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DefinitionsUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *DefinitionsUser) GetUserStatus() int32 {
	if m != nil {
		return m.UserStatus
	}
	return 0
}

func (m *DefinitionsUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DefinitionsUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DefinitionsUser) GetPhone1() string {
	if m != nil {
		return m.Phone1
	}
	return ""
}

func (m *DefinitionsUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Common Reply
type CommonReply struct {
	HttpCode             uint32   `protobuf:"varint,1,opt,name=httpCode,proto3" json:"httpCode,omitempty"`
	ErrorCode            uint32   `protobuf:"varint,2,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,3,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonReply) Reset()         { *m = CommonReply{} }
func (m *CommonReply) String() string { return proto.CompactTextString(m) }
func (*CommonReply) ProtoMessage()    {}
func (*CommonReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{37}
}
func (m *CommonReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonReply.Merge(m, src)
}
func (m *CommonReply) XXX_Size() int {
	return m.Size()
}
func (m *CommonReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommonReply proto.InternalMessageInfo

func (m *CommonReply) GetHttpCode() uint32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *CommonReply) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CommonReply) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// Empty message
type EmptyMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_12be1f3426726ad6, []int{38}
}
func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(m, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return m.Size()
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetPetFindByStatusRequest)(nil), "testPet.GetPetFindByStatusRequest")
	proto.RegisterType((*GetPetFindByTagsRequest)(nil), "testPet.GetPetFindByTagsRequest")
	proto.RegisterType((*GetPetPetIdRequest)(nil), "testPet.GetPetPetIdRequest")
	proto.RegisterType((*PostPetPetIdRequest)(nil), "testPet.PostPetPetIdRequest")
	proto.RegisterType((*DeletePetPetIdRequest)(nil), "testPet.DeletePetPetIdRequest")
	proto.RegisterType((*PostPetPetIdUploadImageRequest)(nil), "testPet.PostPetPetIdUploadImageRequest")
	proto.RegisterType((*PostPetRequest)(nil), "testPet.PostPetRequest")
	proto.RegisterType((*PutPetRequest)(nil), "testPet.PutPetRequest")
	proto.RegisterType((*GetStoreOrderOrderIdRequest)(nil), "testPet.GetStoreOrderOrderIdRequest")
	proto.RegisterType((*DeleteStoreOrderOrderIdRequest)(nil), "testPet.DeleteStoreOrderOrderIdRequest")
	proto.RegisterType((*PostStoreOrderRequest)(nil), "testPet.PostStoreOrderRequest")
	proto.RegisterType((*PostUserCreateWithArrayRequest)(nil), "testPet.PostUserCreateWithArrayRequest")
	proto.RegisterType((*PostUserCreateWithListRequest)(nil), "testPet.PostUserCreateWithListRequest")
	proto.RegisterType((*GetUserLoginRequest)(nil), "testPet.GetUserLoginRequest")
	proto.RegisterType((*PostUserRequest)(nil), "testPet.PostUserRequest")
	proto.RegisterType((*GetUserUsernameRequest)(nil), "testPet.GetUserUsernameRequest")
	proto.RegisterType((*PutUserUsernameRequest)(nil), "testPet.PutUserUsernameRequest")
	proto.RegisterType((*DeleteUserUsernameRequest)(nil), "testPet.DeleteUserUsernameRequest")
	proto.RegisterType((*GetPetFindByStatusReply)(nil), "testPet.GetPetFindByStatusReply")
	proto.RegisterType((*GetPetFindByTagsReply)(nil), "testPet.GetPetFindByTagsReply")
	proto.RegisterType((*GetPetPetIdReply)(nil), "testPet.GetPetPetIdReply")
	proto.RegisterType((*PostPetPetIdUploadImageReply)(nil), "testPet.PostPetPetIdUploadImageReply")
	proto.RegisterType((*GetStoreInventoryReply)(nil), "testPet.GetStoreInventoryReply")
	proto.RegisterMapType((map[int32]*any.Any)(nil), "testPet.GetStoreInventoryReply.DataEntry")
	proto.RegisterType((*PostStoreOrderReply)(nil), "testPet.PostStoreOrderReply")
	proto.RegisterType((*GetStoreOrderOrderIdReply)(nil), "testPet.GetStoreOrderOrderIdReply")
	proto.RegisterType((*GetUserLoginReply)(nil), "testPet.GetUserLoginReply")
	proto.RegisterType((*GetUserUsernameReply)(nil), "testPet.GetUserUsernameReply")
	proto.RegisterType((*DeleteUserUsernameReply)(nil), "testPet.DeleteUserUsernameReply")
	proto.RegisterType((*DeleteUserUsernameReplyData)(nil), "testPet.DeleteUserUsernameReplyData")
	proto.RegisterType((*DeleteUserUsernameReplyDataPetId)(nil), "testPet.DeleteUserUsernameReplyDataPetId")
	proto.RegisterType((*DefinitionsApiResponse)(nil), "testPet.DefinitionsApiResponse")
	proto.RegisterType((*DefinitionsCategory)(nil), "testPet.DefinitionsCategory")
	proto.RegisterType((*DefinitionsCategoryTestObject)(nil), "testPet.DefinitionsCategoryTestObject")
	proto.RegisterType((*DefinitionsOrder)(nil), "testPet.DefinitionsOrder")
	proto.RegisterType((*DefinitionsPet)(nil), "testPet.DefinitionsPet")
	proto.RegisterType((*DefinitionsTag)(nil), "testPet.DefinitionsTag")
	proto.RegisterType((*DefinitionsUser)(nil), "testPet.DefinitionsUser")
	proto.RegisterType((*CommonReply)(nil), "testPet.CommonReply")
	proto.RegisterType((*EmptyMessage)(nil), "testPet.EmptyMessage")
}

func init() { proto.RegisterFile("testPet.proto", fileDescriptor_12be1f3426726ad6) }

var fileDescriptor_12be1f3426726ad6 = []byte{
	// 1466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4f, 0x6f, 0xdb, 0x36,
	0x14, 0x8f, 0x9c, 0xff, 0x2f, 0xff, 0x99, 0x7f, 0x8e, 0x9a, 0xba, 0x81, 0xd0, 0xb5, 0x69, 0xd7,
	0xba, 0x58, 0x5a, 0xa0, 0x41, 0xb0, 0xae, 0x68, 0x93, 0x36, 0xeb, 0x50, 0xb7, 0x86, 0x9a, 0xac,
	0x43, 0xb1, 0x0b, 0x1d, 0x33, 0x8e, 0x56, 0x5b, 0x54, 0x25, 0xba, 0x83, 0x07, 0xec, 0xb0, 0x0f,
	0x31, 0x60, 0x18, 0x76, 0xd8, 0x61, 0x97, 0x7d, 0x93, 0x1d, 0xb7, 0xf3, 0x2e, 0x43, 0xf7, 0x21,
	0x76, 0xd9, 0x61, 0x20, 0x29, 0x4a, 0x94, 0x2c, 0xd9, 0x6e, 0x01, 0x0f, 0xbd, 0x08, 0x7a, 0xe4,
	0x7b, 0x8f, 0x3f, 0xf2, 0x91, 0x8f, 0x3f, 0x3e, 0x98, 0x63, 0x24, 0x60, 0x55, 0xc2, 0xca, 0x9e,
	0x4f, 0x19, 0x45, 0x93, 0xa1, 0x68, 0x6e, 0x34, 0x28, 0x6d, 0x34, 0xc9, 0x0d, 0xd1, 0x5c, 0x6b,
	0x9f, 0xde, 0xc0, 0x6e, 0x47, 0xea, 0x58, 0x37, 0x61, 0xe3, 0x90, 0x70, 0xa5, 0x87, 0x8e, 0x5b,
	0xbf, 0xdf, 0x79, 0xc6, 0x30, 0x6b, 0x07, 0x36, 0x79, 0xd5, 0x26, 0x01, 0x43, 0x6b, 0x30, 0x11,
	0x88, 0x86, 0xa2, 0xb1, 0x35, 0xba, 0x3d, 0x6d, 0x87, 0x92, 0x75, 0x1d, 0xd6, 0x75, 0xa3, 0x23,
	0xdc, 0x88, 0x4c, 0x10, 0x8c, 0x31, 0xdc, 0x50, 0x06, 0xe2, 0xdf, 0xba, 0x0a, 0x48, 0xaa, 0x57,
	0x09, 0x7b, 0x54, 0x57, 0x9a, 0x2b, 0x30, 0xee, 0x71, 0xb9, 0x68, 0x6c, 0x19, 0xdb, 0xc8, 0x96,
	0x82, 0xf5, 0x1c, 0x96, 0xab, 0x34, 0x18, 0x4c, 0x99, 0x0f, 0xe6, 0xe2, 0x16, 0x29, 0x16, 0xb6,
	0x0c, 0x3e, 0x18, 0xff, 0xd7, 0x30, 0x8f, 0x8a, 0xd6, 0x18, 0xf3, 0xea, 0x01, 0x69, 0x12, 0x46,
	0x06, 0xc3, 0xf1, 0x0d, 0x94, 0x74, 0x1c, 0xc7, 0x5e, 0x93, 0xe2, 0xfa, 0xa3, 0x16, 0x6e, 0x90,
	0xde, 0x90, 0xca, 0x80, 0x70, 0xbd, 0xee, 0x30, 0x87, 0xba, 0xb8, 0x59, 0x21, 0x0c, 0xd7, 0x31,
	0xc3, 0x21, 0xc0, 0x8c, 0x1e, 0x3e, 0x85, 0x53, 0xa7, 0x49, 0x04, 0xd8, 0x59, 0x5b, 0xfc, 0x5b,
	0x77, 0x60, 0x3e, 0x1c, 0x5b, 0x8d, 0xf5, 0x21, 0x8c, 0xd5, 0x68, 0xbd, 0x23, 0x86, 0x9a, 0xd9,
	0x59, 0x2f, 0xab, 0x38, 0x1f, 0x90, 0x53, 0xc7, 0x15, 0x2e, 0x03, 0xae, 0x2d, 0x94, 0xac, 0x3d,
	0x98, 0xab, 0xb6, 0x75, 0xeb, 0x2b, 0x30, 0xea, 0x11, 0xd6, 0xcf, 0x98, 0xeb, 0x58, 0xb7, 0xe1,
	0xdc, 0x21, 0x61, 0xcf, 0x18, 0xf5, 0xc9, 0x53, 0xbf, 0x4e, 0x7c, 0xf1, 0x89, 0xd7, 0xaa, 0x08,
	0x93, 0x54, 0xb6, 0x08, 0x6f, 0x63, 0xb6, 0x12, 0xad, 0x3d, 0x28, 0xc9, 0xe5, 0x7d, 0x07, 0xdb,
	0x87, 0xb0, 0xca, 0xe7, 0x1b, 0x5b, 0x2a, 0x93, 0xeb, 0x89, 0x69, 0x6f, 0x64, 0x21, 0x97, 0xfa,
	0x72, 0xe2, 0x4f, 0x64, 0xcc, 0x8e, 0x03, 0xe2, 0xef, 0xfb, 0x04, 0x33, 0xf2, 0xdc, 0x61, 0x67,
	0xf7, 0x7c, 0x1f, 0x77, 0x94, 0xc3, 0x6b, 0x91, 0xc3, 0xd1, 0xed, 0x99, 0x9d, 0x62, 0x96, 0x43,
	0x6e, 0x1d, 0xfa, 0xab, 0xc0, 0xf9, 0x6e, 0x7f, 0x8f, 0x9d, 0x80, 0xbd, 0xab, 0xbb, 0xe5, 0x43,
	0x22, 0xbc, 0x3d, 0xa6, 0x0d, 0xc7, 0x55, 0x4e, 0x4c, 0x98, 0x6a, 0x07, 0xc4, 0x17, 0x1b, 0xd9,
	0x10, 0xfb, 0x24, 0x92, 0x79, 0x9f, 0x87, 0x83, 0xe0, 0x6b, 0xea, 0xd7, 0xc3, 0x3d, 0x14, 0xc9,
	0xd6, 0x5d, 0x58, 0x50, 0xe8, 0xba, 0xf1, 0x18, 0x03, 0xe0, 0xb9, 0x05, 0x6b, 0x21, 0x9e, 0xe3,
	0x70, 0xbc, 0x01, 0x20, 0x59, 0x35, 0x58, 0xab, 0xb6, 0xdf, 0xd6, 0x2a, 0x42, 0x56, 0x18, 0x08,
	0xd9, 0x6d, 0xd8, 0x90, 0x9b, 0xe9, 0x6d, 0xc1, 0xfd, 0x64, 0x24, 0x33, 0x93, 0x4a, 0x67, 0x5e,
	0xb3, 0xc3, 0xed, 0xce, 0x18, 0xf3, 0xf6, 0x69, 0x5d, 0xda, 0xcd, 0xd9, 0x91, 0x8c, 0x36, 0x61,
	0x9a, 0xf8, 0x3e, 0xf5, 0x45, 0x67, 0x41, 0x74, 0xc6, 0x0d, 0xdc, 0x52, 0x08, 0x95, 0xa0, 0x11,
	0x26, 0x95, 0x48, 0xe6, 0x27, 0x53, 0x9c, 0xf0, 0x05, 0xb1, 0x05, 0xf2, 0x4f, 0x26, 0x57, 0xb2,
	0x7e, 0x34, 0x60, 0xb5, 0x3b, 0x71, 0xbe, 0x27, 0xe0, 0xbe, 0x37, 0x60, 0x31, 0x91, 0xa6, 0xff,
	0x0f, 0x5c, 0x46, 0x7f, 0x5c, 0xbf, 0x1a, 0xb0, 0x99, 0x9b, 0x8a, 0x87, 0x87, 0xf1, 0x66, 0x02,
	0xe3, 0x85, 0x2c, 0x8c, 0xf7, 0x3c, 0xc7, 0x26, 0x81, 0x47, 0xdd, 0x80, 0x84, 0x58, 0xff, 0x35,
	0xc4, 0x99, 0x12, 0x99, 0xec, 0x91, 0xfb, 0x9a, 0xb8, 0x8c, 0xfa, 0x9d, 0x61, 0xa2, 0xbc, 0x93,
	0x88, 0xf0, 0x95, 0x08, 0x65, 0x36, 0x88, 0xf2, 0x01, 0x66, 0xf8, 0x81, 0xcb, 0xfc, 0x8e, 0xc4,
	0x6b, 0x56, 0x60, 0x3a, 0x6a, 0x42, 0x8b, 0x30, 0xfa, 0x92, 0xc8, 0xe4, 0xb1, 0x64, 0xf3, 0x5f,
	0x74, 0x15, 0xc6, 0x5f, 0xe3, 0x66, 0x9b, 0x84, 0xc7, 0x76, 0xa5, 0x2c, 0x79, 0x44, 0x59, 0xf1,
	0x88, 0xf2, 0x3d, 0xb7, 0x63, 0x4b, 0x95, 0xbd, 0xc2, 0xae, 0xc1, 0xf7, 0xf7, 0x72, 0x3a, 0x93,
	0x0f, 0x6f, 0xee, 0xd7, 0x13, 0x11, 0xea, 0x75, 0x3b, 0x88, 0xd8, 0xfc, 0x6c, 0x08, 0xaa, 0x93,
	0x71, 0x3f, 0xbd, 0x37, 0x10, 0xbf, 0x85, 0xa5, 0xe4, 0x0d, 0x31, 0x3c, 0x64, 0x48, 0x43, 0x36,
	0x1d, 0xa7, 0xa7, 0x95, 0xae, 0x1b, 0x61, 0x78, 0x10, 0xae, 0x25, 0x16, 0xa7, 0xc7, 0x9d, 0xa0,
	0xd2, 0xc0, 0x7a, 0xd6, 0xa5, 0x30, 0x3c, 0x7c, 0xbb, 0x09, 0x7c, 0x17, 0x35, 0x7c, 0x99, 0x28,
	0xf8, 0x41, 0x0a, 0xb1, 0xba, 0x70, 0xae, 0x87, 0x12, 0x9a, 0x87, 0x82, 0xa3, 0x68, 0x63, 0xc1,
	0xa9, 0xa3, 0xbb, 0x8a, 0x49, 0xca, 0x63, 0x76, 0x65, 0x90, 0x91, 0x64, 0x8e, 0x0e, 0xc9, 0xea,
	0x0e, 0x6c, 0xf5, 0x53, 0x4d, 0x0f, 0x6a, 0xbd, 0x80, 0xb5, 0xec, 0x54, 0xc6, 0xb7, 0xc6, 0x89,
	0x5a, 0xc9, 0x25, 0x5b, 0xfc, 0x0b, 0x5a, 0xdf, 0xf1, 0x22, 0xa6, 0xcd, 0xff, 0x39, 0xa1, 0x6b,
	0x91, 0x20, 0xc0, 0x0d, 0x12, 0x2e, 0x9d, 0x12, 0xad, 0xef, 0x0c, 0x58, 0xd6, 0x9c, 0xef, 0x63,
	0x46, 0x1a, 0xd4, 0xef, 0x74, 0x4d, 0x3c, 0x8b, 0xbf, 0x3f, 0x04, 0xe0, 0xd3, 0x7f, 0x5a, 0xfb,
	0x8a, 0x9c, 0x30, 0xe1, 0x78, 0x66, 0xe7, 0x52, 0xd6, 0xde, 0x50, 0x5e, 0x8f, 0x22, 0x6d, 0x5b,
	0xb3, 0xb4, 0x1e, 0xc0, 0xf9, 0x9e, 0xca, 0x5d, 0x60, 0x56, 0xf4, 0x28, 0x44, 0xef, 0x80, 0x5f,
	0x0c, 0x58, 0x4c, 0x9f, 0xd6, 0x1c, 0xea, 0x6f, 0xc2, 0xd4, 0xab, 0x36, 0x76, 0x99, 0xc3, 0x24,
	0xcf, 0x59, 0xb2, 0x23, 0x99, 0xf7, 0x05, 0x67, 0x8e, 0x77, 0x80, 0x99, 0x5a, 0xac, 0x48, 0xd6,
	0x5e, 0x2c, 0x63, 0xfa, 0x8b, 0x85, 0xdb, 0x9c, 0xd0, 0x96, 0xc7, 0xe3, 0x5a, 0x1c, 0xdf, 0x32,
	0xb6, 0xa7, 0xec, 0x48, 0x0e, 0xc1, 0x4f, 0x44, 0xd1, 0xfc, 0xc3, 0x80, 0xf9, 0xe4, 0xed, 0xc9,
	0x2f, 0xd9, 0xe8, 0x25, 0x96, 0x73, 0xc9, 0x1e, 0xe1, 0x86, 0x7c, 0xa2, 0x69, 0x18, 0x0a, 0x09,
	0x0c, 0x72, 0x9c, 0xd1, 0x68, 0x91, 0x76, 0x61, 0xea, 0x24, 0x5c, 0x4a, 0x81, 0x76, 0x66, 0x67,
	0xb3, 0x57, 0x6c, 0xec, 0x48, 0x3b, 0x8a, 0xf5, 0xb8, 0x16, 0xeb, 0x4d, 0x98, 0xf6, 0xce, 0x28,
	0xa3, 0xc7, 0x7e, 0x33, 0x28, 0x4e, 0x88, 0x17, 0x63, 0xdc, 0x60, 0xdd, 0x4a, 0x4c, 0xe9, 0x08,
	0x37, 0x06, 0xd9, 0x3f, 0xd6, 0x3f, 0x06, 0x2c, 0xa4, 0x32, 0x08, 0x1f, 0xe7, 0xd4, 0xf1, 0x03,
	0xf6, 0x24, 0xe6, 0x8c, 0x71, 0x03, 0x5f, 0xe7, 0x26, 0x0e, 0x3b, 0x43, 0x92, 0xad, 0x64, 0x1e,
	0x69, 0xd2, 0xc2, 0x4e, 0x33, 0x0c, 0x9a, 0x14, 0x44, 0xfc, 0xcf, 0xa8, 0xab, 0x26, 0x23, 0x05,
	0x54, 0x02, 0xe0, 0x44, 0x54, 0x72, 0x4e, 0x11, 0x9b, 0x25, 0x5b, 0x6b, 0x09, 0xd1, 0x4f, 0x46,
	0xe8, 0x75, 0x72, 0x3f, 0x95, 0x24, 0xf7, 0x3c, 0x1e, 0xc2, 0xe9, 0x47, 0xc5, 0x69, 0x19, 0x0f,
	0x29, 0x25, 0xc8, 0x2f, 0xa4, 0xc8, 0xef, 0x09, 0xcc, 0xec, 0xd3, 0x56, 0x8b, 0x0e, 0xf3, 0xde,
	0xb0, 0xe6, 0x61, 0xf6, 0x41, 0xcb, 0x63, 0x9d, 0x8a, 0x3c, 0xea, 0x3b, 0x7f, 0xce, 0xc2, 0xe4,
	0x91, 0xdc, 0x00, 0x68, 0x0f, 0x26, 0x43, 0xa2, 0x86, 0xe2, 0xed, 0x96, 0x7c, 0xc9, 0x9a, 0x2b,
	0x51, 0x87, 0x86, 0xd5, 0x1a, 0x41, 0xbb, 0x30, 0x21, 0x1f, 0xad, 0x68, 0x2d, 0x36, 0x6d, 0x0f,
	0x62, 0xf9, 0xa5, 0xaa, 0x2e, 0xe8, 0x94, 0x1f, 0x59, 0x3a, 0x15, 0xca, 0x2e, 0x6f, 0x98, 0x5b,
	0x3d, 0x75, 0xa4, 0xf7, 0xcf, 0x15, 0x29, 0x8e, 0x19, 0x3b, 0xca, 0xb6, 0xd3, 0xaa, 0x20, 0x66,
	0xa9, 0x87, 0x86, 0xf4, 0x7b, 0x08, 0x33, 0x1a, 0xd9, 0x46, 0xe7, 0x52, 0x06, 0x7a, 0x85, 0xc2,
	0xdc, 0xc8, 0xee, 0x94, 0x8e, 0x0e, 0x60, 0x56, 0x67, 0xc7, 0x68, 0x33, 0xbd, 0xf2, 0x09, 0x57,
	0x79, 0x8b, 0xf8, 0x29, 0x3f, 0x6b, 0x7a, 0x75, 0x04, 0x95, 0x52, 0xb7, 0xd0, 0xa0, 0x9e, 0x5e,
	0xc2, 0x7a, 0x0e, 0x5b, 0x47, 0x97, 0x33, 0xa1, 0x75, 0x97, 0x56, 0xcc, 0x0f, 0xfa, 0x2b, 0xca,
	0xc1, 0x2a, 0x82, 0x30, 0x25, 0x99, 0x2e, 0x5a, 0x8d, 0xac, 0xf5, 0x9d, 0x6a, 0x5e, 0xe8, 0x43,
	0x8e, 0xad, 0x11, 0x54, 0x95, 0x85, 0x97, 0x98, 0x22, 0x6a, 0xab, 0x90, 0x59, 0xa1, 0x30, 0x37,
	0x73, 0xfb, 0xa5, 0xc7, 0x9a, 0x60, 0x54, 0x5d, 0x9c, 0x13, 0x5d, 0xec, 0x02, 0x93, 0x51, 0x32,
	0x31, 0xad, 0x3e, 0x5a, 0x72, 0x8c, 0x17, 0x8a, 0x18, 0x75, 0x0f, 0x73, 0x39, 0x15, 0xc4, 0xdc,
	0x91, 0xf2, 0xa2, 0xf9, 0x31, 0x4c, 0xa9, 0x22, 0x03, 0x2a, 0x26, 0xe6, 0xaa, 0xd5, 0x1d, 0x72,
	0xad, 0x5f, 0xc8, 0xbd, 0x90, 0x51, 0x90, 0x49, 0xed, 0x85, 0xfc, 0x92, 0x4d, 0xae, 0xef, 0x2f,
	0x60, 0x2d, 0xbb, 0x38, 0x83, 0x2e, 0xf5, 0x70, 0xad, 0x55, 0x6f, 0x72, 0x3d, 0x7f, 0x06, 0xb3,
	0x3a, 0x0b, 0xd7, 0x4e, 0x54, 0x46, 0xf9, 0xc6, 0x34, 0x73, 0x7a, 0xa5, 0xaf, 0x4f, 0x60, 0x2e,
	0x6e, 0xa6, 0x6d, 0x96, 0xb7, 0x39, 0xf3, 0xb0, 0x3c, 0x83, 0x85, 0x14, 0x23, 0x47, 0x17, 0xd2,
	0x03, 0xa6, 0x0a, 0x24, 0xe6, 0xf9, 0x7c, 0x05, 0x35, 0xc1, 0x85, 0x54, 0x09, 0x47, 0x73, 0x9a,
	0x5d, 0xdc, 0xe9, 0x95, 0x7d, 0xbb, 0xa9, 0xa7, 0x96, 0x7d, 0x73, 0xeb, 0x38, 0x5a, 0xf6, 0xcd,
	0xe1, 0xae, 0xd6, 0xc8, 0xfd, 0xc5, 0xdf, 0xde, 0x94, 0x8c, 0xdf, 0xdf, 0x94, 0x8c, 0xbf, 0xde,
	0x94, 0x8c, 0x1f, 0xfe, 0x2e, 0x8d, 0xd4, 0x26, 0xc4, 0xdb, 0xf3, 0xe6, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x1a, 0x5d, 0x8d, 0x43, 0xeb, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestPetClient is the client API for TestPet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestPetClient interface {
	// /pet | Post
	// operationId: addPet | Summary : Add a new pet to the store
	PostPet(ctx context.Context, in *PostPetRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /pet | Put
	// operationId: updatePet | Summary : Update an existing pet
	PutPet(ctx context.Context, in *PutPetRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /pet/findByStatus | Get
	// operationId: findPetsByStatus | Summary : Finds Pets by status | Description : Multiple status values can be provided with comma separated strings
	GetPetFindByStatus(ctx context.Context, in *GetPetFindByStatusRequest, opts ...grpc.CallOption) (*GetPetFindByStatusReply, error)
	// /pet/findByTags | Get
	// operationId: findPetsByTags | Summary : Finds Pets by tags | Description : Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
	GetPetFindByTags(ctx context.Context, in *GetPetFindByTagsRequest, opts ...grpc.CallOption) (*GetPetFindByTagsReply, error)
	// /pet/{petId} | Get
	// operationId: getPetById | Summary : Find pet by ID | Description : Returns a single pet
	GetPetPetId(ctx context.Context, in *GetPetPetIdRequest, opts ...grpc.CallOption) (*GetPetPetIdReply, error)
	// /pet/{petId} | Post
	// operationId: updatePetWithForm | Summary : Updates a pet in the store with form data
	PostPetPetId(ctx context.Context, in *PostPetPetIdRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /pet/{petId} | Delete
	// operationId: deletePet | Summary : Deletes a pet
	DeletePetPetId(ctx context.Context, in *DeletePetPetIdRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /pet/{petId}/uploadImage | Post
	// operationId: uploadFile | Summary : uploads an image
	PostPetPetIdUploadImage(ctx context.Context, in *PostPetPetIdUploadImageRequest, opts ...grpc.CallOption) (*PostPetPetIdUploadImageReply, error)
	// /store/inventory | Get
	// operationId: getInventory | Summary : Returns pet inventories by status | Description : Returns a map of status codes to quantities
	GetStoreInventory(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetStoreInventoryReply, error)
	// /store/order | Post
	// operationId: placeOrder | Summary : Place an order for a pet
	PostStoreOrder(ctx context.Context, in *PostStoreOrderRequest, opts ...grpc.CallOption) (*PostStoreOrderReply, error)
	// /store/order/{orderId} | Get
	// operationId: getOrderById | Summary : Find purchase order by ID | Description : For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
	GetStoreOrderOrderId(ctx context.Context, in *GetStoreOrderOrderIdRequest, opts ...grpc.CallOption) (*GetStoreOrderOrderIdReply, error)
	// /store/order/{orderId} | Delete
	// operationId: deleteOrder | Summary : Delete purchase order by ID | Description : For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
	DeleteStoreOrderOrderId(ctx context.Context, in *DeleteStoreOrderOrderIdRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /user | Post
	// operationId: createUser | Summary : Create user | Description : This can only be done by the logged in user.
	PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /user/createWithArray | Post
	// operationId: createUsersWithArrayInput | Summary : Creates list of users with given input array
	PostUserCreateWithArray(ctx context.Context, in *PostUserCreateWithArrayRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /user/createWithList | Post
	// operationId: createUsersWithListInput | Summary : Creates list of users with given input array
	PostUserCreateWithList(ctx context.Context, in *PostUserCreateWithListRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /user/login | Get
	// operationId: loginUser | Summary : Logs user into the system
	GetUserLogin(ctx context.Context, in *GetUserLoginRequest, opts ...grpc.CallOption) (*GetUserLoginReply, error)
	// /user/logout | Get
	// operationId: logoutUser | Summary : Logs out current logged in user session
	GetUserLogout(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*CommonReply, error)
	// /user/{username} | Get
	// operationId: getUserByName | Summary : Get user by user name
	GetUserUsername(ctx context.Context, in *GetUserUsernameRequest, opts ...grpc.CallOption) (*GetUserUsernameReply, error)
	// /user/{username} | Put
	// operationId: updateUser | Summary : Updated user | Description : This can only be done by the logged in user.
	PutUserUsername(ctx context.Context, in *PutUserUsernameRequest, opts ...grpc.CallOption) (*CommonReply, error)
	// /user/{username} | Delete
	// operationId: deleteUser | Summary : Delete user | Description : This can only be done by the logged in user.
	DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameRequest, opts ...grpc.CallOption) (*DeleteUserUsernameReply, error)
}

type testPetClient struct {
	cc *grpc.ClientConn
}

func NewTestPetClient(cc *grpc.ClientConn) TestPetClient {
	return &testPetClient{cc}
}

func (c *testPetClient) PostPet(ctx context.Context, in *PostPetRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PostPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PutPet(ctx context.Context, in *PutPetRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PutPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetPetFindByStatus(ctx context.Context, in *GetPetFindByStatusRequest, opts ...grpc.CallOption) (*GetPetFindByStatusReply, error) {
	out := new(GetPetFindByStatusReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetPetFindByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetPetFindByTags(ctx context.Context, in *GetPetFindByTagsRequest, opts ...grpc.CallOption) (*GetPetFindByTagsReply, error) {
	out := new(GetPetFindByTagsReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetPetFindByTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetPetPetId(ctx context.Context, in *GetPetPetIdRequest, opts ...grpc.CallOption) (*GetPetPetIdReply, error) {
	out := new(GetPetPetIdReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetPetPetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PostPetPetId(ctx context.Context, in *PostPetPetIdRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PostPetPetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) DeletePetPetId(ctx context.Context, in *DeletePetPetIdRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/DeletePetPetId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PostPetPetIdUploadImage(ctx context.Context, in *PostPetPetIdUploadImageRequest, opts ...grpc.CallOption) (*PostPetPetIdUploadImageReply, error) {
	out := new(PostPetPetIdUploadImageReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PostPetPetIdUploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetStoreInventory(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*GetStoreInventoryReply, error) {
	out := new(GetStoreInventoryReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetStoreInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PostStoreOrder(ctx context.Context, in *PostStoreOrderRequest, opts ...grpc.CallOption) (*PostStoreOrderReply, error) {
	out := new(PostStoreOrderReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PostStoreOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetStoreOrderOrderId(ctx context.Context, in *GetStoreOrderOrderIdRequest, opts ...grpc.CallOption) (*GetStoreOrderOrderIdReply, error) {
	out := new(GetStoreOrderOrderIdReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetStoreOrderOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) DeleteStoreOrderOrderId(ctx context.Context, in *DeleteStoreOrderOrderIdRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/DeleteStoreOrderOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PostUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PostUserCreateWithArray(ctx context.Context, in *PostUserCreateWithArrayRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PostUserCreateWithArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PostUserCreateWithList(ctx context.Context, in *PostUserCreateWithListRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PostUserCreateWithList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetUserLogin(ctx context.Context, in *GetUserLoginRequest, opts ...grpc.CallOption) (*GetUserLoginReply, error) {
	out := new(GetUserLoginReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetUserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetUserLogout(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetUserLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) GetUserUsername(ctx context.Context, in *GetUserUsernameRequest, opts ...grpc.CallOption) (*GetUserUsernameReply, error) {
	out := new(GetUserUsernameReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/GetUserUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) PutUserUsername(ctx context.Context, in *PutUserUsernameRequest, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/PutUserUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPetClient) DeleteUserUsername(ctx context.Context, in *DeleteUserUsernameRequest, opts ...grpc.CallOption) (*DeleteUserUsernameReply, error) {
	out := new(DeleteUserUsernameReply)
	err := c.cc.Invoke(ctx, "/testPet.TestPet/DeleteUserUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestPetServer is the server API for TestPet service.
type TestPetServer interface {
	// /pet | Post
	// operationId: addPet | Summary : Add a new pet to the store
	PostPet(context.Context, *PostPetRequest) (*CommonReply, error)
	// /pet | Put
	// operationId: updatePet | Summary : Update an existing pet
	PutPet(context.Context, *PutPetRequest) (*CommonReply, error)
	// /pet/findByStatus | Get
	// operationId: findPetsByStatus | Summary : Finds Pets by status | Description : Multiple status values can be provided with comma separated strings
	GetPetFindByStatus(context.Context, *GetPetFindByStatusRequest) (*GetPetFindByStatusReply, error)
	// /pet/findByTags | Get
	// operationId: findPetsByTags | Summary : Finds Pets by tags | Description : Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
	GetPetFindByTags(context.Context, *GetPetFindByTagsRequest) (*GetPetFindByTagsReply, error)
	// /pet/{petId} | Get
	// operationId: getPetById | Summary : Find pet by ID | Description : Returns a single pet
	GetPetPetId(context.Context, *GetPetPetIdRequest) (*GetPetPetIdReply, error)
	// /pet/{petId} | Post
	// operationId: updatePetWithForm | Summary : Updates a pet in the store with form data
	PostPetPetId(context.Context, *PostPetPetIdRequest) (*CommonReply, error)
	// /pet/{petId} | Delete
	// operationId: deletePet | Summary : Deletes a pet
	DeletePetPetId(context.Context, *DeletePetPetIdRequest) (*CommonReply, error)
	// /pet/{petId}/uploadImage | Post
	// operationId: uploadFile | Summary : uploads an image
	PostPetPetIdUploadImage(context.Context, *PostPetPetIdUploadImageRequest) (*PostPetPetIdUploadImageReply, error)
	// /store/inventory | Get
	// operationId: getInventory | Summary : Returns pet inventories by status | Description : Returns a map of status codes to quantities
	GetStoreInventory(context.Context, *EmptyMessage) (*GetStoreInventoryReply, error)
	// /store/order | Post
	// operationId: placeOrder | Summary : Place an order for a pet
	PostStoreOrder(context.Context, *PostStoreOrderRequest) (*PostStoreOrderReply, error)
	// /store/order/{orderId} | Get
	// operationId: getOrderById | Summary : Find purchase order by ID | Description : For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
	GetStoreOrderOrderId(context.Context, *GetStoreOrderOrderIdRequest) (*GetStoreOrderOrderIdReply, error)
	// /store/order/{orderId} | Delete
	// operationId: deleteOrder | Summary : Delete purchase order by ID | Description : For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
	DeleteStoreOrderOrderId(context.Context, *DeleteStoreOrderOrderIdRequest) (*CommonReply, error)
	// /user | Post
	// operationId: createUser | Summary : Create user | Description : This can only be done by the logged in user.
	PostUser(context.Context, *PostUserRequest) (*CommonReply, error)
	// /user/createWithArray | Post
	// operationId: createUsersWithArrayInput | Summary : Creates list of users with given input array
	PostUserCreateWithArray(context.Context, *PostUserCreateWithArrayRequest) (*CommonReply, error)
	// /user/createWithList | Post
	// operationId: createUsersWithListInput | Summary : Creates list of users with given input array
	PostUserCreateWithList(context.Context, *PostUserCreateWithListRequest) (*CommonReply, error)
	// /user/login | Get
	// operationId: loginUser | Summary : Logs user into the system
	GetUserLogin(context.Context, *GetUserLoginRequest) (*GetUserLoginReply, error)
	// /user/logout | Get
	// operationId: logoutUser | Summary : Logs out current logged in user session
	GetUserLogout(context.Context, *EmptyMessage) (*CommonReply, error)
	// /user/{username} | Get
	// operationId: getUserByName | Summary : Get user by user name
	GetUserUsername(context.Context, *GetUserUsernameRequest) (*GetUserUsernameReply, error)
	// /user/{username} | Put
	// operationId: updateUser | Summary : Updated user | Description : This can only be done by the logged in user.
	PutUserUsername(context.Context, *PutUserUsernameRequest) (*CommonReply, error)
	// /user/{username} | Delete
	// operationId: deleteUser | Summary : Delete user | Description : This can only be done by the logged in user.
	DeleteUserUsername(context.Context, *DeleteUserUsernameRequest) (*DeleteUserUsernameReply, error)
}

// UnimplementedTestPetServer can be embedded to have forward compatible implementations.
type UnimplementedTestPetServer struct {
}

func (*UnimplementedTestPetServer) PostPet(ctx context.Context, req *PostPetRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPet not implemented")
}
func (*UnimplementedTestPetServer) PutPet(ctx context.Context, req *PutPetRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPet not implemented")
}
func (*UnimplementedTestPetServer) GetPetFindByStatus(ctx context.Context, req *GetPetFindByStatusRequest) (*GetPetFindByStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetFindByStatus not implemented")
}
func (*UnimplementedTestPetServer) GetPetFindByTags(ctx context.Context, req *GetPetFindByTagsRequest) (*GetPetFindByTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetFindByTags not implemented")
}
func (*UnimplementedTestPetServer) GetPetPetId(ctx context.Context, req *GetPetPetIdRequest) (*GetPetPetIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetPetId not implemented")
}
func (*UnimplementedTestPetServer) PostPetPetId(ctx context.Context, req *PostPetPetIdRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPetPetId not implemented")
}
func (*UnimplementedTestPetServer) DeletePetPetId(ctx context.Context, req *DeletePetPetIdRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetPetId not implemented")
}
func (*UnimplementedTestPetServer) PostPetPetIdUploadImage(ctx context.Context, req *PostPetPetIdUploadImageRequest) (*PostPetPetIdUploadImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPetPetIdUploadImage not implemented")
}
func (*UnimplementedTestPetServer) GetStoreInventory(ctx context.Context, req *EmptyMessage) (*GetStoreInventoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreInventory not implemented")
}
func (*UnimplementedTestPetServer) PostStoreOrder(ctx context.Context, req *PostStoreOrderRequest) (*PostStoreOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostStoreOrder not implemented")
}
func (*UnimplementedTestPetServer) GetStoreOrderOrderId(ctx context.Context, req *GetStoreOrderOrderIdRequest) (*GetStoreOrderOrderIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreOrderOrderId not implemented")
}
func (*UnimplementedTestPetServer) DeleteStoreOrderOrderId(ctx context.Context, req *DeleteStoreOrderOrderIdRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStoreOrderOrderId not implemented")
}
func (*UnimplementedTestPetServer) PostUser(ctx context.Context, req *PostUserRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUser not implemented")
}
func (*UnimplementedTestPetServer) PostUserCreateWithArray(ctx context.Context, req *PostUserCreateWithArrayRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserCreateWithArray not implemented")
}
func (*UnimplementedTestPetServer) PostUserCreateWithList(ctx context.Context, req *PostUserCreateWithListRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserCreateWithList not implemented")
}
func (*UnimplementedTestPetServer) GetUserLogin(ctx context.Context, req *GetUserLoginRequest) (*GetUserLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLogin not implemented")
}
func (*UnimplementedTestPetServer) GetUserLogout(ctx context.Context, req *EmptyMessage) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLogout not implemented")
}
func (*UnimplementedTestPetServer) GetUserUsername(ctx context.Context, req *GetUserUsernameRequest) (*GetUserUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUsername not implemented")
}
func (*UnimplementedTestPetServer) PutUserUsername(ctx context.Context, req *PutUserUsernameRequest) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserUsername not implemented")
}
func (*UnimplementedTestPetServer) DeleteUserUsername(ctx context.Context, req *DeleteUserUsernameRequest) (*DeleteUserUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserUsername not implemented")
}

func RegisterTestPetServer(s *grpc.Server, srv TestPetServer) {
	s.RegisterService(&_TestPet_serviceDesc, srv)
}

func _TestPet_PostPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PostPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PostPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PostPet(ctx, req.(*PostPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PutPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PutPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PutPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PutPet(ctx, req.(*PutPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetPetFindByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetFindByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetPetFindByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetPetFindByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetPetFindByStatus(ctx, req.(*GetPetFindByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetPetFindByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetFindByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetPetFindByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetPetFindByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetPetFindByTags(ctx, req.(*GetPetFindByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetPetPetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetPetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetPetPetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetPetPetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetPetPetId(ctx, req.(*GetPetPetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PostPetPetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetPetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PostPetPetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PostPetPetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PostPetPetId(ctx, req.(*PostPetPetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_DeletePetPetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetPetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).DeletePetPetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/DeletePetPetId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).DeletePetPetId(ctx, req.(*DeletePetPetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PostPetPetIdUploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetPetIdUploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PostPetPetIdUploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PostPetPetIdUploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PostPetPetIdUploadImage(ctx, req.(*PostPetPetIdUploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetStoreInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetStoreInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetStoreInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetStoreInventory(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PostStoreOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStoreOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PostStoreOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PostStoreOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PostStoreOrder(ctx, req.(*PostStoreOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetStoreOrderOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreOrderOrderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetStoreOrderOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetStoreOrderOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetStoreOrderOrderId(ctx, req.(*GetStoreOrderOrderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_DeleteStoreOrderOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreOrderOrderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).DeleteStoreOrderOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/DeleteStoreOrderOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).DeleteStoreOrderOrderId(ctx, req.(*DeleteStoreOrderOrderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PostUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PostUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PostUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PostUser(ctx, req.(*PostUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PostUserCreateWithArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserCreateWithArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PostUserCreateWithArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PostUserCreateWithArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PostUserCreateWithArray(ctx, req.(*PostUserCreateWithArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PostUserCreateWithList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserCreateWithListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PostUserCreateWithList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PostUserCreateWithList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PostUserCreateWithList(ctx, req.(*PostUserCreateWithListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetUserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetUserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetUserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetUserLogin(ctx, req.(*GetUserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetUserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetUserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetUserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetUserLogout(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_GetUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).GetUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/GetUserUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).GetUserUsername(ctx, req.(*GetUserUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_PutUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).PutUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/PutUserUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).PutUserUsername(ctx, req.(*PutUserUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPet_DeleteUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPetServer).DeleteUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testPet.TestPet/DeleteUserUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPetServer).DeleteUserUsername(ctx, req.(*DeleteUserUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestPet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testPet.TestPet",
	HandlerType: (*TestPetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostPet",
			Handler:    _TestPet_PostPet_Handler,
		},
		{
			MethodName: "PutPet",
			Handler:    _TestPet_PutPet_Handler,
		},
		{
			MethodName: "GetPetFindByStatus",
			Handler:    _TestPet_GetPetFindByStatus_Handler,
		},
		{
			MethodName: "GetPetFindByTags",
			Handler:    _TestPet_GetPetFindByTags_Handler,
		},
		{
			MethodName: "GetPetPetId",
			Handler:    _TestPet_GetPetPetId_Handler,
		},
		{
			MethodName: "PostPetPetId",
			Handler:    _TestPet_PostPetPetId_Handler,
		},
		{
			MethodName: "DeletePetPetId",
			Handler:    _TestPet_DeletePetPetId_Handler,
		},
		{
			MethodName: "PostPetPetIdUploadImage",
			Handler:    _TestPet_PostPetPetIdUploadImage_Handler,
		},
		{
			MethodName: "GetStoreInventory",
			Handler:    _TestPet_GetStoreInventory_Handler,
		},
		{
			MethodName: "PostStoreOrder",
			Handler:    _TestPet_PostStoreOrder_Handler,
		},
		{
			MethodName: "GetStoreOrderOrderId",
			Handler:    _TestPet_GetStoreOrderOrderId_Handler,
		},
		{
			MethodName: "DeleteStoreOrderOrderId",
			Handler:    _TestPet_DeleteStoreOrderOrderId_Handler,
		},
		{
			MethodName: "PostUser",
			Handler:    _TestPet_PostUser_Handler,
		},
		{
			MethodName: "PostUserCreateWithArray",
			Handler:    _TestPet_PostUserCreateWithArray_Handler,
		},
		{
			MethodName: "PostUserCreateWithList",
			Handler:    _TestPet_PostUserCreateWithList_Handler,
		},
		{
			MethodName: "GetUserLogin",
			Handler:    _TestPet_GetUserLogin_Handler,
		},
		{
			MethodName: "GetUserLogout",
			Handler:    _TestPet_GetUserLogout_Handler,
		},
		{
			MethodName: "GetUserUsername",
			Handler:    _TestPet_GetUserUsername_Handler,
		},
		{
			MethodName: "PutUserUsername",
			Handler:    _TestPet_PutUserUsername_Handler,
		},
		{
			MethodName: "DeleteUserUsername",
			Handler:    _TestPet_DeleteUserUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testPet.proto",
}

func (m *GetPetFindByStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPetFindByStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPetFindByStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Status[iNdEx])
			copy(dAtA[i:], m.Status[iNdEx])
			i = encodeVarintTestPet(dAtA, i, uint64(len(m.Status[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPetFindByTagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPetFindByTagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPetFindByTagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintTestPet(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetPetPetIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPetPetIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPetPetIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.PetId)<<1)^uint64((m.PetId>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostPetPetIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPetPetIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPetPetIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.PetId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.PetId)<<1)^uint64((m.PetId>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeletePetPetIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePetPetIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePetPetIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.PetId)<<1)^uint64((m.PetId>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostPetPetIdUploadImageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPetPetIdUploadImageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPetPetIdUploadImageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AdditionalMetadata) > 0 {
		i -= len(m.AdditionalMetadata)
		copy(dAtA[i:], m.AdditionalMetadata)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.AdditionalMetadata)))
		i--
		dAtA[i] = 0x12
	}
	if m.PetId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.PetId)<<1)^uint64((m.PetId>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostPetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutPetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutPetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutPetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pet != nil {
		{
			size, err := m.Pet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStoreOrderOrderIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStoreOrderOrderIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStoreOrderOrderIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OrderId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteStoreOrderOrderIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStoreOrderOrderIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteStoreOrderOrderIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OrderId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostStoreOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostStoreOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostStoreOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostUserCreateWithArrayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostUserCreateWithArrayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostUserCreateWithArrayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		for iNdEx := len(m.Body) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Body[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestPet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PostUserCreateWithListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostUserCreateWithListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostUserCreateWithListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		for iNdEx := len(m.Body) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Body[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestPet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetUserLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserLoginRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PostUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserUsernameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserUsernameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserUsernameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutUserUsernameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutUserUsernameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutUserUsernameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserUsernameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserUsernameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPetFindByStatusReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPetFindByStatusReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPetFindByStatusReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestPet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPetFindByTagsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPetFindByTagsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPetFindByTagsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestPet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetPetPetIdReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPetPetIdReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPetPetIdReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostPetPetIdUploadImageReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostPetPetIdUploadImageReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostPetPetIdUploadImageReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStoreInventoryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStoreInventoryReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStoreInventoryReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTestPet(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTestPet(dAtA, i, uint64((uint32(k)<<1)^uint32((k>>31))))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTestPet(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostStoreOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostStoreOrderReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostStoreOrderReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStoreOrderOrderIdReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStoreOrderOrderIdReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStoreOrderOrderIdReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserLoginReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserLoginReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserLoginReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUserUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserUsernameReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserUsernameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserUsernameReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserUsernameReplyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameReplyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserUsernameReplyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetId != nil {
		{
			size, err := m.PetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserUsernameReplyDataPetId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserUsernameReplyDataPetId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserUsernameReplyDataPetId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefinitionsApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionsApiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionsApiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint32(m.Code)<<1)^uint32((m.Code>>31))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefinitionsCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionsCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionsCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TestObject != nil {
		{
			size, err := m.TestObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefinitionsCategoryTestObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionsCategoryTestObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionsCategoryTestObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PetId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.PetId)<<1)^uint64((m.PetId>>63))))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefinitionsOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionsOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionsOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x30
	}
	if m.Complete {
		i--
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShipDate) > 0 {
		i -= len(m.ShipDate)
		copy(dAtA[i:], m.ShipDate)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ShipDate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Quantity != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint32(m.Quantity)<<1)^uint32((m.Quantity>>31))))
		i--
		dAtA[i] = 0x10
	}
	if m.PetId != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.PetId)<<1)^uint64((m.PetId>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefinitionsPet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionsPet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionsPet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhotoUrls) > 0 {
		for iNdEx := len(m.PhotoUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PhotoUrls[iNdEx])
			copy(dAtA[i:], m.PhotoUrls[iNdEx])
			i = encodeVarintTestPet(dAtA, i, uint64(len(m.PhotoUrls[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Category != nil {
		{
			size, err := m.Category.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestPet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestPet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefinitionsTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionsTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionsTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefinitionsUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefinitionsUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefinitionsUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Phone1) > 0 {
		i -= len(m.Phone1)
		copy(dAtA[i:], m.Phone1)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Phone1)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x42
	}
	if m.Id != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint64(m.Id)<<1)^uint64((m.Id>>63))))
		i--
		dAtA[i] = 0x38
	}
	if m.UserStatus != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64((uint32(m.UserStatus)<<1)^uint32((m.UserStatus>>31))))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorMsg) > 0 {
		i -= len(m.ErrorMsg)
		copy(dAtA[i:], m.ErrorMsg)
		i = encodeVarintTestPet(dAtA, i, uint64(len(m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrorCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x10
	}
	if m.HttpCode != 0 {
		i = encodeVarintTestPet(dAtA, i, uint64(m.HttpCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EmptyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestPet(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestPet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPetFindByStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, s := range m.Status {
			l = len(s)
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPetFindByTagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPetPetIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sozTestPet(uint64(m.PetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPetPetIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sozTestPet(uint64(m.PetId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePetPetIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sozTestPet(uint64(m.PetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPetPetIdUploadImageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sozTestPet(uint64(m.PetId))
	}
	l = len(m.AdditionalMetadata)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutPetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pet != nil {
		l = m.Pet.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStoreOrderOrderIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTestPet(uint64(m.OrderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteStoreOrderOrderIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTestPet(uint64(m.OrderId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostStoreOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostUserCreateWithArrayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Body) > 0 {
		for _, e := range m.Body {
			l = e.Size()
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostUserCreateWithListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Body) > 0 {
		for _, e := range m.Body {
			l = e.Size()
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserLoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserUsernameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutUserUsernameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteUserUsernameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPetFindByStatusReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPetFindByTagsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPetPetIdReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostPetPetIdUploadImageReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStoreInventoryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTestPet(uint64(l))
			}
			mapEntrySize := 1 + sozTestPet(uint64(k)) + l
			n += mapEntrySize + 1 + sovTestPet(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostStoreOrderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStoreOrderOrderIdReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserLoginReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUserUsernameReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteUserUsernameReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteUserUsernameReplyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	if m.PetId != nil {
		l = m.PetId.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteUserUsernameReplyDataPetId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefinitionsApiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sozTestPet(uint64(m.Code))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefinitionsCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.TestObject != nil {
		l = m.TestObject.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefinitionsCategoryTestObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	if m.PetId != 0 {
		n += 1 + sozTestPet(uint64(m.PetId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefinitionsOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sozTestPet(uint64(m.PetId))
	}
	if m.Quantity != 0 {
		n += 1 + sozTestPet(uint64(m.Quantity))
	}
	l = len(m.ShipDate)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Complete {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefinitionsPet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if len(m.PhotoUrls) > 0 {
		for _, s := range m.PhotoUrls {
			l = len(s)
			n += 1 + l + sovTestPet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefinitionsTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DefinitionsUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.UserStatus != 0 {
		n += 1 + sozTestPet(uint64(m.UserStatus))
	}
	if m.Id != 0 {
		n += 1 + sozTestPet(uint64(m.Id))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Phone1)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpCode != 0 {
		n += 1 + sovTestPet(uint64(m.HttpCode))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovTestPet(uint64(m.ErrorCode))
	}
	l = len(m.ErrorMsg)
	if l > 0 {
		n += 1 + l + sovTestPet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmptyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTestPet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestPet(x uint64) (n int) {
	return sovTestPet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPetFindByStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPetFindByStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPetFindByStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPetFindByTagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPetFindByTagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPetFindByTagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPetPetIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPetPetIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPetPetIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.PetId = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPetPetIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPetPetIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPetPetIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.PetId = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePetPetIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePetPetIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePetPetIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.PetId = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPetPetIdUploadImageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPetPetIdUploadImageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPetPetIdUploadImageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.PetId = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &DefinitionsPet{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutPetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutPetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutPetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pet == nil {
				m.Pet = &DefinitionsPet{}
			}
			if err := m.Pet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStoreOrderOrderIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoreOrderOrderIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoreOrderOrderIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStoreOrderOrderIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStoreOrderOrderIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStoreOrderOrderIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostStoreOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostStoreOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostStoreOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &DefinitionsOrder{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostUserCreateWithArrayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostUserCreateWithArrayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostUserCreateWithArrayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body, &DefinitionsUser{})
			if err := m.Body[len(m.Body)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostUserCreateWithListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostUserCreateWithListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostUserCreateWithListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body, &DefinitionsUser{})
			if err := m.Body[len(m.Body)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &DefinitionsUser{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserUsernameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserUsernameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserUsernameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutUserUsernameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutUserUsernameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutUserUsernameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &DefinitionsUser{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPetFindByStatusReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPetFindByStatusReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPetFindByStatusReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DefinitionsPet{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPetFindByTagsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPetFindByTagsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPetFindByTagsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DefinitionsPet{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPetPetIdReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPetPetIdReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPetPetIdReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DefinitionsPet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostPetPetIdUploadImageReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostPetPetIdUploadImageReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostPetPetIdUploadImageReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DefinitionsApiResponse{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStoreInventoryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoreInventoryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoreInventoryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int32]*any.Any)
			}
			var mapkey int32
			var mapvalue *any.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestPet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var mapkeytemp int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTestPet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkeytemp |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapkeytemp = int32((uint32(mapkeytemp) >> 1) ^ uint32(((mapkeytemp&1)<<31)>>31))
					mapkey = int32(mapkeytemp)
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTestPet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTestPet
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTestPet
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &any.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTestPet(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTestPet
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostStoreOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostStoreOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostStoreOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DefinitionsOrder{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStoreOrderOrderIdReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStoreOrderOrderIdReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStoreOrderOrderIdReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DefinitionsOrder{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserLoginReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserLoginReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserLoginReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DefinitionsUser{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DeleteUserUsernameReplyData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameReplyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameReplyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameReplyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PetId == nil {
				m.PetId = &DeleteUserUsernameReplyDataPetId{}
			}
			if err := m.PetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserUsernameReplyDataPetId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserUsernameReplyDataPetId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserUsernameReplyDataPetId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefinitionsApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionsApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionsApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Code = v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefinitionsCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionsCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionsCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestObject == nil {
				m.TestObject = &DefinitionsCategoryTestObject{}
			}
			if err := m.TestObject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefinitionsCategoryTestObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionsCategoryTestObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionsCategoryTestObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.PetId = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefinitionsOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionsOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionsOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.PetId = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Quantity = v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShipDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShipDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefinitionsPet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionsPet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionsPet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &DefinitionsTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &DefinitionsCategory{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhotoUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhotoUrls = append(m.PhotoUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefinitionsTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionsTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionsTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefinitionsUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefinitionsUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefinitionsUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStatus", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.UserStatus = v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Id = int64(v)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestPet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestPet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTestPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTestPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestPet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestPet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestPet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestPet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestPet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestPet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestPet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestPet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestPet = fmt.Errorf("proto: unexpected end of group")
)
