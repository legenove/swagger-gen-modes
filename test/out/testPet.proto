// Code generated by swagger-gen mode proto. DO NOT EDIT.

// Title: Swagger Petstore
// Version: 1.0.0
// Description: This is a sample Petstore server.  You can test


syntax = "proto3";
package testPet;

import "google/protobuf/any.proto";

// Services
service TestPet {
  // /pet | Post
  // operationId: addPet | Summary : Add a new pet to the store
  rpc PostPet (PostPetRequest) returns (CommonReply) {}
  // /pet | Put
  // operationId: updatePet | Summary : Update an existing pet
  rpc PutPet (PutPetRequest) returns (CommonReply) {}
  // /pet/findByStatus | Get
  // operationId: findPetsByStatus | Summary : Finds Pets by status | Description : Multiple status values can be provided with comma separated strings
  rpc GetPetFindByStatus (GetPetFindByStatusRequest) returns (GetPetFindByStatusReply) {}
  // /pet/findByTags | Get
  // operationId: findPetsByTags | Summary : Finds Pets by tags | Description : Muliple tags can be provided with comma separated strings. Use\ \ tag1, tag2, tag3 for testing.
  rpc GetPetFindByTags (GetPetFindByTagsRequest) returns (GetPetFindByTagsReply) {}
  // /pet/{petId} | Get
  // operationId: getPetById | Summary : Find pet by ID | Description : Returns a single pet
  rpc GetPetPetId (GetPetPetIdRequest) returns (GetPetPetIdReply) {}
  // /pet/{petId} | Post
  // operationId: updatePetWithForm | Summary : Updates a pet in the store with form data
  rpc PostPetPetId (PostPetPetIdRequest) returns (CommonReply) {}
  // /pet/{petId} | Delete
  // operationId: deletePet | Summary : Deletes a pet
  rpc DeletePetPetId (DeletePetPetIdRequest) returns (CommonReply) {}
  // /pet/{petId}/uploadImage | Post
  // operationId: uploadFile | Summary : uploads an image
  rpc PostPetPetIdUploadImage (PostPetPetIdUploadImageRequest) returns (PostPetPetIdUploadImageReply) {}
  // /store/inventory | Get
  // operationId: getInventory | Summary : Returns pet inventories by status | Description : Returns a map of status codes to quantities
  rpc GetStoreInventory (EmptyMessage) returns (GetStoreInventoryReply) {}
  // /store/order | Post
  // operationId: placeOrder | Summary : Place an order for a pet
  rpc PostStoreOrder (PostStoreOrderRequest) returns (PostStoreOrderReply) {}
  // /store/order/{orderId} | Get
  // operationId: getOrderById | Summary : Find purchase order by ID | Description : For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
  rpc GetStoreOrderOrderId (GetStoreOrderOrderIdRequest) returns (GetStoreOrderOrderIdReply) {}
  // /store/order/{orderId} | Delete
  // operationId: deleteOrder | Summary : Delete purchase order by ID | Description : For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
  rpc DeleteStoreOrderOrderId (DeleteStoreOrderOrderIdRequest) returns (CommonReply) {}
  // /user | Post
  // operationId: createUser | Summary : Create user | Description : This can only be done by the logged in user.
  rpc PostUser (PostUserRequest) returns (CommonReply) {}
  // /user/createWithArray | Post
  // operationId: createUsersWithArrayInput | Summary : Creates list of users with given input array
  rpc PostUserCreateWithArray (PostUserCreateWithArrayRequest) returns (CommonReply) {}
  // /user/createWithList | Post
  // operationId: createUsersWithListInput | Summary : Creates list of users with given input array
  rpc PostUserCreateWithList (PostUserCreateWithListRequest) returns (CommonReply) {}
  // /user/login | Get
  // operationId: loginUser | Summary : Logs user into the system
  rpc GetUserLogin (GetUserLoginRequest) returns (GetUserLoginReply) {}
  // /user/logout | Get
  // operationId: logoutUser | Summary : Logs out current logged in user session
  rpc GetUserLogout (EmptyMessage) returns (CommonReply) {}
  // /user/{username} | Get
  // operationId: getUserByName | Summary : Get user by user name
  rpc GetUserUsername (GetUserUsernameRequest) returns (GetUserUsernameReply) {}
  // /user/{username} | Put
  // operationId: updateUser | Summary : Updated user | Description : This can only be done by the logged in user.
  rpc PutUserUsername (PutUserUsernameRequest) returns (CommonReply) {}
  // /user/{username} | Delete
  // operationId: deleteUser | Summary : Delete user | Description : This can only be done by the logged in user.
  rpc DeleteUserUsername (DeleteUserUsernameRequest) returns (DeleteUserUsernameReply) {}
}

message GetPetFindByStatusRequest {
  repeated string status = 1;  // Status values that need to be considered for filter
}

message GetPetFindByTagsRequest {
  repeated string tags = 1;  // Tags to filter by
}

message GetPetPetIdRequest {
  sint64 petId = 1;  // ID of pet to return
}

message PostPetPetIdRequest {
  sint64 petId = 1;  // ID of pet that needs to be updated
  string name = 2;  // Updated name of the pet
  string status = 3;  // Updated status of the pet
}

message DeletePetPetIdRequest {
  sint64 petId = 1;  // Pet id to delete
}

message PostPetPetIdUploadImageRequest {
  sint64 petId = 1;  // ID of pet to update
  string additionalMetadata = 2;  // Additional data to pass to server
  bytes file = 3;  // file to upload
}

message PostPetRequest {
  DefinitionsPet body = 1;  // Pet object that needs to be added to the store
}

message PutPetRequest {
  DefinitionsPet pet = 1;  // Pet object that needs to be added to the store
}

message GetStoreOrderOrderIdRequest {
  uint64 orderId = 1;  // ID of pet that needs to be fetched
}

message DeleteStoreOrderOrderIdRequest {
  uint64 orderId = 1;  // ID of the order that needs to be deleted
}

message PostStoreOrderRequest {
  DefinitionsOrder body = 1;  // order placed for purchasing the pet
}

message PostUserCreateWithArrayRequest {
  repeated DefinitionsUser body = 1;  // List of user object
}

message PostUserCreateWithListRequest {
  repeated DefinitionsUser body = 1;  // List of user object
}

message GetUserLoginRequest {
  string username = 1;  // The user name for login
  string password = 2;  // The password for login in clear text
}

message PostUserRequest {
  DefinitionsUser body = 1;  // Created user object
}

message GetUserUsernameRequest {
  string username = 1;  // The name that needs to be fetched. Use user1 for testing.
}

message PutUserUsernameRequest {
  string username = 1;  // name that need to be updated
  DefinitionsUser body = 2;  // Updated user object
}

message DeleteUserUsernameRequest {
  string username = 1;  // The name that needs to be deleted
}

message GetPetFindByStatusReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  repeated DefinitionsPet data = 15;
}

message GetPetFindByTagsReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  repeated DefinitionsPet data = 15;
}

message GetPetPetIdReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  DefinitionsPet data = 15;
}

message PostPetPetIdUploadImageReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  DefinitionsApiResponse data = 15;
}

message GetStoreInventoryReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  map<sint32,google.protobuf.Any> data = 15;
}

message PostStoreOrderReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  DefinitionsOrder data = 15;
}

message GetStoreOrderOrderIdReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  DefinitionsOrder data = 15;
}

message GetUserLoginReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  string data = 15;
}

message GetUserUsernameReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  DefinitionsUser data = 15;
}

message DeleteUserUsernameReply {
  uint32 httpCode = 1;
  uint32 errorCode = 2;
  string errorMsg = 3;
  DeleteUserUsernameReplyData data = 15;
}

message DeleteUserUsernameReplyData {
  sint64 id = 1;
  DeleteUserUsernameReplyDataPetId petId = 2;
}

message DeleteUserUsernameReplyDataPetId {
  sint64 id = 1;
}

message DefinitionsApiResponse {
  sint32 code = 1;
  string type = 2;
  string message = 3;
}

message DefinitionsCategory {
  sint64 id = 1;
  string name = 2;
  DefinitionsCategoryTestObject testObject = 3;
}

message DefinitionsCategoryTestObject {
  sint64 id = 1;
  sint64 petId = 2;
}

message DefinitionsOrder {
  sint64 petId = 1;
  sint32 quantity = 2;
  string shipDate = 3;
  string status = 4;  // Order Status
  bool complete = 5;
  sint64 id = 6;
}

message DefinitionsPet {
  repeated DefinitionsTag tags = 1;
  string status = 2;  // pet status in the store
  sint64 id = 3;
  DefinitionsCategory category = 4;
  string name = 5;
  repeated string photoUrls = 6;
}

message DefinitionsTag {
  sint64 id = 1;
  string name = 2;
}

message DefinitionsUser {
  string firstName = 1;
  string lastName = 2;
  string email = 3;
  string phone = 5;
  sint32 userStatus = 6;  // User Status
  sint64 id = 7;
  string password = 8;
  string phone1 = 9;
  string username = 10;
}

// Common Reply
message CommonReply {
  uint32 httpCode=1;
  uint32 errorCode=2;
  string errorMsg=3;
}

// Empty message
message EmptyMessage {}

